Collection集合总结

	Collection
		
		List   有序,可重复
		
			ArrayList	有序,可重复
				底层数据结构是数组,查询快,增删慢
				线程不安全,效率高
			Vector	有序,可重复
				底层数据结构是数组,查询快,增删慢
				线程安全,效率低
			LinkedList	有序,可重复
				底层数据结构是链表,查询慢,增删块
				线程不安全,效率高
				
		Set   无序,唯一
		
			HashSet	  无序,唯一
				底层数据结构是哈希表
				如何保证元素唯一性的呢?
					以来两个方法: hashCode()和equals()
					开发中自动生成这两个方法即可
				LinkedHashSet	有序,唯一
					底层数据结构是链表和哈希表
					由链表保证元素有序
					由哈希表保证元素唯一
			TreeSet 	排序,唯一
				底层数据结构是红黑树(二叉树)
				如何保证元素排序呢?
					自然排序
					比较器排序
				如何保证元素唯一性的呢?
					根据返回值是否为0来决定
					
					
针对Collection集合我们到底使用谁呢?
			
								   ┌ 是: TreeSet
						   		   │
			   ┌───── 是: 排序吗───┤	 	注意: 如果知道是Set,但不知道是用哪个Set,就用HashSet
			   │			       │
			   │				   └ 否: HashSet
			   │
	唯一吗	───┤
			   │
			   │				   ┌ 是: Vector 		注意: 就算要安全也不用 Vector,用Collections类的方法获取同步的集合
			   │ 				   │
			   │				   │		注意: 如果你知道是List,但是不知道用哪个List,就用ArrayList
			   └───── 否: 安全吗───┤	
								   │		 ┌ 查询多: ArrayList
								   └ 否: ────┤
											 └ 增删多: LinkedList
											 
	注意: 如果你知道是Collection集合,但是不知道使用谁,就用ArrayList	
	
	
在集合中常见的数据结构

	ArrayXxx: 底层数据结构是数组,查询快,增删慢 
	LinkedXxx: 底层数据结构是链表,查询慢,增删块 
	HashXxx: 底层数据结构是哈希表.依赖两个方法: hashCode()和equals()
	TreeXxx: 底层数据结构是二叉树.两种排序方式: 自然排序和比较器排序
			
								 