

B: Android 资源(Resources)访问
		各种静态资源放在项目的 res/ 下独立子目录中
	a: 部分子目录
		1: anim/			定义动画属性的 XML 文件. 它们被保存在 res/anim/ 文件夹下, 通过 R.anim 类访问
		2: color/			定义颜色状态列表的XML文件. 它们被保存在 res/color/ 文件夹下, 通过 R.color 类访问
		3: drawable/		图片文件, 如 .png,.jpg,.gif 或者 XML 文件, 被编译为位图、状态列表、形状、动画图片. 它们被保存在 res/drawable/ 文件夹下, 通过 R.drawable 类访问
		4: layout/			定义用户界面布局的XML文件. 它们被保存在 res/layout/ 文件夹下, 通过 R.layout 类访问
		5: menu/			定义应用程序菜单的XML文件, 如选项菜单, 上下文菜单, 子菜单等. 它们被保存在 res/menu/ 文件夹下, 通过 R.menu 类访问
		6: raw/				任意的文件以它们的原始形式保存. 需要根据名为 R.raw.filename 的资源 ID, 通过调用 Resource.openRawResource() 来打开 raw 文件
		7: values/			包含简单值(如字符串, 整数, 颜色等)的XML文件. 这里有一些文件夹下的资源命名规范. 
								arrays.xml 代表数组资源, 通过 R.array 类访问; 
								integers.xml 代表整数资源, 通过 R.integer 类访问; 
								bools.xml 代表布尔值资源, 通过 R.bool 类访问; 
								colors.xml 代表颜色资源, 通过 R.color 类访问; 
								dimens.xml 代表维度值, 通过 R.dimen 类访问; 
								strings.xml 代表字符串资源, 通过 R.string 类访问; 
								styles.xml 代表样式资源, 通过R.style类访问
		8: xml/				可以通过调用 Resources.getXML() 来在运行时读取任意的XML文件. 可以在这里保存运行时使用的各种配置文件

C: Android 活动(Activity)
		活动代表了一个具有用户界面的单一屏幕, 如 Java 的窗口或者帧 Android 的活动是 ContextThemeWrapper 类的子类
	a: Activity 类可实现 ContextThemeWrapper 类的方法
		1: onCreate()		这是第一个回调, 在活动第一次创建时调用
		2: onStart()		这个回调在活动为用户可见时被调用
		3: onResume()		这个回调在应用程序与用户开始可交互的时候调用
		4: onPause()		被暂停的活动无法接受用户输入, 不能执行任何代码. 当前活动将要被暂停, 上一个活动将要被恢复时调用
		5: onStop()			当活动不在可见时调用
		6: onDestroy()		当活动被系统销毁之前调用
		7: onRestart()		当活动被停止以后重新打开时调用
	
D: Android 服务(Service)
		服务是一个后台运行的组件, 执行长时间运行且不需要用户交互的任务. 即使应用被销毁也依然可以工作. 
	a: 服务基本上包含两种状态
		1: Started			Android 的应用程序组件, 如活动, 通过 startService()启动了服务, 则服务是 Started 状态. 一旦启动, 服务可以在后台无限期运行, 即使启动它的组件已经被销毁. 
		2: Bound			当 Android 的应用程序组件通过 bindService()绑定了服务, 则服务是 Bound 状态. 
							Bound 状态的服务提供了一个客户服务器接口来允许组件与服务进行交互, 如发送请求, 获取结果, 甚至通过IPC来进行跨进程通信
	b: 继承 Service 类, 可实现方法
		1: onStartCommand()		其他组件(如活动)通过调用 startService() 来请求启动服务时, 系统调用该方法. 
								如果你实现该方法, 你有责任在工作完成时通过 stopSelf() 或者 stopService() 方法来停止服务. 
		2: onBind				当其他组件想要通过 bindService() 来绑定服务时, 系统调用该方法. 如果你实现该方法, 你需要返回 IBinder 对象来提供一个接口, 以便客户来与服务通信. 
								你必须实现该方法, 如果你不允许绑定, 则直接返回 null. 
		3: onUnbind()			当客户中断所有服务发布的特殊接口时, 系统调用该方法. 
		4: onRebind()			当新的客户端与服务连接, 且此前它已经通过 onUnbind(Intent) 通知断开连接时, 系统调用该方法. 
		5: onCreate()			当服务通过 onStartCommand() 和 onBind() 被第一次创建的时候, 系统调用该方法. 该调用要求执行一次性安装. 
		6: onDestroy()			当服务不再有用或者被销毁时, 系统调用该方法. 你的服务需要实现该方法来清理任何资源, 如线程, 已注册的监听器, 接收器等. 
	
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		