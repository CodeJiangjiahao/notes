ThinkPHP: 免费开源, 快速简单, 面向对象, 轻量级 PHP 开发框架
//环境需求	(PHP >= 5.4.0) (PDO MbString CURL PHP Extension)

/* ThinkPHP 安装
	1: Git 方式安装		( https://github.com/top-think )
	2: Composer 方式	( https://getcomposer.org/download )
	3: Download 方式	( www.thinkphp.cn ) (官网下载)
*/

//命名空间 (类似 package) 	// namespace app\<module>\controller;				eg: namespace app\index\controller;
//导入文件 (类似 import)	// use app\<module>\controller\<Class> [as 别名];	eg: use app\common\controller\Index as commonIndex;

// http://<serverName>/index.php/<module>/controller/<action>/<param>/<value>/...

/* URL 隐藏入口文件 index.php
	a: 编辑 apache 服务器配置文件 httpd.conf
		1: 取消注释 LoadModule rewrite_module modules/mod_rewrite.so (删除行首的 #)
		2: AllowOverride None 改为 AllowOverride All
	b: 编辑 \public\.htaccess
		<IfModule mod_rewrite.c>
		  Options +FollowSymlinks -Multiviews
		  RewriteEngine On

		  RewriteCond %{REQUEST_FILENAME} !-d
		  RewriteCond %{REQUEST_FILENAME} !-f
		  RewriteRule ^(.*)$ index.php/$1 [QSA,PT,L]
		</IfModule>
		
		//若使用的是 phpStudy 则要修改为  RewriteRule ^(.*)$ index.php [L,E=PATH_INFO:$1]   
*/

//开启 session 功能: config: 'session' => [ 'httponly' => true, 'secure' => false ] (删除 session.httponly, session.secure)

//config:  'default_return_type' => 'html'	//默认返回的格式类型, 取值: html, json, xml, ..
//config:  'default_ajax_return' => 'json'	//默认 Ajax 返回的格式, 取值: json, xml, ..
/*	方便管理的返回格式
	use think\Config;
	class Index {
		//this_url?type=xml: 获取 xml 格式数据;  this_url: 获取 json 格式数据
		public function getUserInfo($type='json') {		
			if(!in_array($type, ['json', 'xml', 'jsonp'])) { $type = 'json'; }	//默认使用 json 格式
			Config::set('default_return_type',$type);	//修改返回格式
			...
		}
	}
	
*/

/* Controller 层通过继承 think\Controller 可以方便返回 View */
/* Model 层的类, 继承 think\Model, 类名与数据库表名关联 */	
/* Controller 层获取 Model 层的类实例化对象
	1: 导入 Model 类, 直接通过 new 的方式获取	(推荐使用)
	2: think\Loader::model($modelName) 
	3: model($modelName)
*/

/* 统一返回类型(json)	//Controller 返回类型类, 包含请求是否成功 和 {json数据|错误信息}
	class ReturnType {
		private $status;	//表明对应请求的返回处理结果 "success" 或 "fail"	
		private $data;		//若 status=="success", 则 data 为前端需要的 json 数据; 若 status=="fail", 则 data 为通用的错误码格式

		//通用创建方法
		public static function create($result,$status='success'){
			$type = new ReturnType;
			$type->setData($result);
			$type->setStatus($status);
			return $type->toArray($type);	//转为数组返回
		}

		public function getStatus() { return $this->status; }
		public function setStatus($status) { $this->status = $status; }
		public function getData() { return $this->data; }
		public function setData($data) { $this->data = $data; }

		//转为数组
		public static function toArray($obj) {
			$array = [ 'status'  => $obj->getStatus(), 'data'  => $obj->getData() ];
			return $array;
		}
	}
*/

/* 统一异常处理
	1: 创建 error 层
	2: 创建 异常处理类接口 CommonError
		namespace app\<module>\error;
		//异常处理类接口
		interface CommonError {
			function getErrorCode();  //获取错误代码
			function getErrorMsg();  //获取错误信息
			function setErrorMsg($errorMsg); //设置错误信息, 并返回 该对象
		}
	3: 创建 异常枚举类 EmBusinessError, 实现 异常处理类接口 CommonError
		namespace app\<module>\error;
		use app\<module>\error\CommonError;
		//异常枚举类
		class EmBusinessError implements CommonError {
			//1000 开头为通用错误
			public static function UNKNOWN_ERROR(){ return new EmBusinessError(10001,'未知错误'); }			//10001 未知错误
			public static function PARAMETER_ERROR(){ return new EmBusinessError(10002,'参数错误'); }		//10002 参数错误
			//2000 开头为用户错误
			public static function USER_NOT_EXIST(){ return new EmBusinessError(20001,'用户不存在'); }		//20001 用户不存在

			private $errorCode;	//错误代码
			private $errorMsg;	//错误信息
			//构造函数
			function __construct($errorCode = 10001, $errorMsg = '未知错误') {
				$this->errorCode = $errorCode; $this->errorMsg = $errorMsg;
			}
			
			public function getErrorCode() { return $this->errorCode; }	//获取错误代码
			public function getErrorMsg() { return $this->errorMsg; } //错误错误信息
			
			//设置错误信息,并返回 $this
			public function setErrorMsg($errorMsg) { 
				$this->errorMsg = $errorMsg; return $this; 
			}
		}
	4: 创建异常类 BusinessException, 继承 Exception, 实现 CommonError 接口
		namespace app\<module>\error;
		use app\<module>\error\CommonError;
		use app\<module>\error\EmBusinessError;
		use think\Exception;
		//异常类
		class BusinessException extends Exception implements CommonError {
			private $commonError;	//异常处理类接口实例化对象

			//直接接收 EmBusinessError 的传参 用于构造业务异常
			//接受自定义 errorMsg 的方式构造业务异常
			public function __construct($commonError = null, $errorMsg='') { 
				$this->commonError = $commonError; 
				if($errorMsg != '') $this->commonError->setErrorMsg($errorMsg);
			}
			
			public function getErrorCode() { return $this->commonError->getErrorCode(); }	//获取错误代码
			public function getErrorMsg() { return $this->commonError->getErrorMsg(); }	//获取错误信息
			//设置错误信息,并返回 $this->commonError
			public function setErrorMsg($errorMsg) { 
				$this->commonError->setErrorMsg($errorMsg); return $this->commonError; 
			}
		}
	5: config:  'unkonwn_error'  => false,	//是否显示未知错误, 开发时设置为 false, 发布后设置为 true
				// 异常处理handle类 留空使用 \think\exception\Handle
				'exception_handle' => function(Exception $e){
										$responseData = [];
										if($e instanceof BusinessException){    //判断是否是自定义异常
											$businessException = $e;
											$responseData[] = [ 
												'errorCode' => $businessException->getErrorCode(),  //设置错误代码
												'errorMsg' => $businessException->getErrorMsg(),    //设置错误信息
											];
										} else {
											$UNKNOWN_ERROR = EmBusinessError::UNKNOWN_ERROR();  //显示未知错误
											$responseData[] = [ 
												'errorCode' => $UNKNOWN_ERROR->getErrorCode(),  
												'errorMsg' => $UNKNOWN_ERROR->getErrorMsg(),
											];
											if(!Env::get('unkonwn_error')) return;  //若不显示未知错误, 则直接返回, 最终会看到错误信息
										}
										$re = ReturnType::create($responseData,'fail');
										return json($re, 200);
									},
	
*/


一: ThinkPHP
	A: ThinkPHP 目录结构
		a: ThinkPHP 5
				├─ application     应用目录
				├─ extend          扩展类库目录(可定义)
				├─ public          网站对外访问目录
				├─ runtime         运行时目录(可定义)
				├─ vendor          第三方类库目录(Composer)
				├─ thinkphp        框架核心目录
				├─ build.php       自动生成定义文件(参考)
				├─ composer.json   Composer定义文件
				├─ LICENSE.txt     授权说明文件
				├─ README.md       README 文件
				├─ think           命令行工具入口
			
			1: application	应用目录
					├─ index			前台模块
					├─ command.php		控制台配置文件,配合命令行启动使用
					├─ common.php		项目公用文件, 可将全局函数定义在此
					├─ config.php		应用的配置文件
					├─ database.php		数据库配置文件
					├─ route.php		路由配置文件
					├─ tags.php			应用行为扩展文件
	
	B: ThinkPHP 规范
		a: 目录命名
			1: 目录使用 (小写+下划线) 命名		eg: admin_list
		b: 文件命名
			1: 类库函数文件名均以 (.php) 结尾		eg: Admin.php
			2: 类的文件名均以 (命名空间) 定义, 且命名空间和类库文件所在的路径一致
			3: 类文件采用 (驼峰命名 首字母大写), 其他文件为 (小写+下划线)
			4: 类名和文件名保持一致, 采用 (驼峰式 首字母大写), 不需要加后缀		eg: Index (不需要写成 IndexController)
		c: 函数, 类属性命名
			1: 函数使用 (驼峰命名 首字母小写) 		eg: getUserName()
			2: 属性名采用 (驼峰命名 首字母小写)		eg: $tableName
			3: 以 (双下划线) 开头的函数或方法为 魔术方法
		d: 常量和配置
			1: 常量以 (大写字母+下划线) 命名		eg: APP_PATH
			2: 配置参数以 (小写字母+下划线) 命名
		e: 其他规范
			1: 表和字段采用 (小写+下划线) 命名, 不能以下划线开头
			2: 应用类库的命名空间统一使用 app (可配置)
	
	C: 模块设计
			ThinkPHP 5.0 默认采用多模块的构架
		a: 模块创建
			1: 在 application 目录下创建模块
				application
					├─ module			//模块
						├─  controller		//控制层
						├─  model			//模型层
						├─  view			//视图层
			2: common 共用模块, 该模块不能通过 url 访问到(安全)
	
	D: ThinkPHP 配置	
		/* 不同环境场景的自由快速切换
			1: \CONF_PATH\config.php
				<?php  use think\Env;
				return [
					'app_status' => Env::get('status','dev')	//读取环境变量 status 对应的场景配置文件, 默认使用 \CONF_PATH\dev.php (自定义默认环境)
				];
			2: \.env
				status=prod		//使用 \CONF_PATH\prod.php (更改该项,可快速切换场景配置) */
		//扩展配置 优先级高于 应用配置:  \CONF_PATH\extra\<xxx>.php > \CONF_PATH\config.php
		//定义配置文件目录: 在 \public\index.php 中添加  define('CONF_PATH', __DIR__ . '/../conf/'); (配置文件目录为: \conf\)
		a: 惯例配置(默认配置)
			1: 配置文件路径		// \thinkphp\convention.php
			2: 修改 convention.php 可以修改惯例配置
		b: 应用配置  
			//应用配置会覆盖惯例配置  \CONF_PATH\config.php (需要手动创建)
				eg: <?php
					return [
						//与惯例配置文件类似
						'app_email'  =>  '1234@qq.com',
						'app_phone'  =>  '12345678901'
					];
		c: 扩展配置	
			//扩展配置目录下的所有配置文件覆盖惯例配置 	\CONF_PATH\extra\<xxx>.php (需要手动创建)
			//数据库配置文件 可以直接写在 \CONF_PATH\database.php , 无需放在 \CONF_PATH\extra\database.php
			扩展配置文件名 会变成 key,文件的返回值变成 value
				eg: // \conf\extra\email.php
					<?php
						return [												["email"] => array(2) {
							'host' => '123@qq.com',				===>   				["host"] => string(10) "123@qq.com",
							'name' => '111@qq.com'									["name"] => string(10) "111@qq.com"
						];														}
		d: 场景配置(应用模式状态)
			//在 \CONF_PATH\config.php 中修改 app_status 的值
			//ThinkPHP 5 会根据 app_status 的值去调用对应的 \CONF_PATH\xxx.php
		e: 模块配置(仅在对应模块下有效)
			//配置文件目录为 \CONF_PATH\<module>\config.php
			//模块配置 目录下可以继续使用 扩展配置 \CONF_PATH\<module>\extra\<xxx>.php
		f: 动态配置
			//可以通过 config(key,value) 方法动态配置
		g: Config 类和助手函数 config()
				//Config 类路径  \thinkphp\library\think\Config.php	
				//Config 类命名空间	think
				//使用 Config 类方法	use think\Config;  Config::get(); Config::has('ddd');
			1: get($name=null,$range): 获取配置参数, $name 为空则获取所有配置
			2: set($name,$value=null,$range=''): 设置配置参数, $name 为数组则为批量设置
			3: reset($range=''): 重置配置参数
			4: has($name,$range=''): 检测配置是否存在
			5: range($range): 设定配置参数的作用域
			6: parse($config,$type='',$name='',$range=''): 解析配置文件或内容
			7: load($file,$name='',$range=''): 加载配置文件(PHP格式)
		h: 环境变量配置
				// $_ENV: 系统环境变量数组
				// think\Env::get($name,$default=null)	获取环境变量值
			//自定义环境变量配置文件  \.env  
			1: key=value => 环境变量变成: 'PHP_' + strtoupper(key), 值为 value; 可以通过 Env::get(key) 获取 value
			
				eg: // \.env	
					email=13.@qq.com		==>  PHP_EMAIL, Env::get('email')
					
					[database]
					hostname=localhost		==>  PHP_DATABASE_HOSTNAME, Env::get('database.hostname') | Env::get('database_hostname')
					username=root			==>  PHP_DATABASE_USERNAME, Env::get('database.username') | Env::get('database_username')
					password=root			==>  PHP_DATABASE_PASSWORD, Env::get('database.password') | Env::get('database_password')
				
					number=11				==>  PHP_NUMBER, Env::get('number')
			
	E: URL
		//config: 'auto_bind_module' => true //开启自动绑定模块. 开启后, \public\xxx.php 在有名字相同的模块时, 会自动绑定模块(相当于 define("BIND_MODULE",module))
		//define("BIND_MODULE","<module>"): 绑定模块. 绑定后,可以省略模块名,但是只能访问该模块
		eg: //  \public\api.php  与 \public\index.php 一样, 但是限制只能访问 api 模块	
			<?php
				define("APP_PATH", __DIR__ . '/../application/');
				define("BIND_MODULE", 'api');
				require __DIR__ . '/../thinkphp/start.php';
			
	F: 路由
			//config: 'url_route_on' => true, //开启路由
			//config: 'url_route_must' => false, //关闭强制使用路由		
		a: 路由配置文件
			// \CONF_PATH\route.php
			<?php
			return [
				//配置路由后, 对应的 url 将不能访问, 只能通过路由方式访问
				'' => '<module>/<controller>/<action>',	
				...
			];
		b: url() 路由助手函数

三: Request 请求 和 Response 响应
	A: Request	(think\Request)
		a: 获取方式
			1: request() 获取	 
					eg: class Index { public function index(){ $request = request(); } }
			2: think\Request::instance() 获取
					eg: use think\Request; 
						class Index { public function index(){ $request = Request::instance(); } }
			3: 参数注入方式
					eg: use think\Request; 
						class Index { public function index(Request $request){} }
		b: 成员方法
			//URL
			1: domain($domain=null) 		//设置或获取当前 包含协议的域名 (=协议+域名) (不传参数为获取, 传入为设置)
			2: pathinfo()					//获取当前请求 URL 的 pathinfo 信息 (含 URL 后缀) (=URL-协议-域名) 
			3: path()						//获取当前请求 URL 的 pathinfo 信息(不含 URL 后缀)(=URL-协议-域名) 
			4: url(true)					//获取完整 URL, 包括 Query_String
			5: url($url)					//设置当前 URL
			5: baseUrl($url=null)			//设置或获取当前 URL, 不包括 Query_String
			//请求类型
			1: method()						//获取当前的 请求类型 ("GET","POST",..)
			2: isGet(),isPost(),..			//判断是否为 GET,POST,.. 请求
			3: isAjax()						//判断当前是否为 Ajax 请求
			//请求参数
			1: param($name='')				//获取当前 请求的参数(可以获取 pathinfo 中的参数), 找不到 $name 参数时返回 $default
			2: get($name='') 				//获取 POST 参数, 不传参数则获取所有 GET 参数的数组
			3: post($name='') 				//获取 GET 参数, 不传参数则获取所有 POST 参数的数组
			4: session($name='')			//获取 session 中的数据		eg: $request->session();
			5: cookie($name='')				//获取 cookie 中的数据
			//获取 模块(module) 控制器(controller) 操作(action)
			1: module($module=null)			//设置或获取当前的 模块名, 不传参时获取, 传参时设置
			2: controller($ctrl=null)		//设置或获取当前的 控制器名
			3: action($action=null)			//设置或获取当前的 操作名
	
	B: Response	(think\Response)
		a: 获取方式
			1: 参数注入方式
					eg: use think\Response; 
						class Index { public function index(Response $response){} }
		b: 返回 json 格式
			1: 修改返回类型后, 直接返回任意数据  // \think\Config::set('default_return_type','json');
			
四: View 视图 和 模板
	A: View
		a: 获取 view
			1: 助手函数 view()
			2: controller 继承 think\Controller, 通过 Controller 成员方法获取
		b: view(): 助手函数,返回视图层页面
			1: view()				//默认模板地址: app/<module>/view/<controller>/<action>.html
			2: view('upload')			//app/<module>/view/<controller>/upload.html
			3: view('att/upload')		//app/<module>/view/att/upload.html
			4: view('./index/upload')	//public/index/upload.html
			5: view($view, $data)	//转到 $view 页面, 并携带数据 $data 	
					eg: class Index {
							public function index() {
								$data = ['email'=>'123@qq.com', 'user'=>'ss'];
								return view('index',$data);	//转到 app/<module>/index/index.html, 并携带数据 $data
							}
						}
			6: view($view,$data,$replace)	//转到页面,携带数据, 并将 view 里,与 $replace 里的变量名相同的东西, 全部替换为对应的变量值
					eg: class Index {
							public function index() {
								$replace = ['EMAIL'=>'123@qq.com', 'USER'=>'ss'];
								return view('index',[], $replace);	//view 里的所有 'EMAIL' 将替换为 '123@qq.com'; 'USER' 将替换为 'ss'
							}
						}
		b: Controller 成员方法 (think\Controller)
			//页面渲染
			1: fetch($template,$data,$replace)			//获取 view, 使用与助手函数 view() 相似
					eg: use think\Controller;
						class Index extends Controller { public function index(){ return $this->fetch('index',['email'=>'123@qq.com'],['USER'=>'ss']); } } 
			2: display($content,$data,$replace)		//将 $content 作为页面内容渲染页面
					eg: return $this->display('这是{$name}页面',['name'=>'index']);	
			//变量赋值
			1: fetch()/display() 中传入 $data
			2: assign($name,$value)					//变量赋值
			3: $this->view->key = value				//变量赋值 	eg: public function index(){ $this->view->name = '123'; return $this->fetch(); }
			4: think\View::share($name,$value)		//变量赋值	eg: use think\View;   public function index(){ View::share('name', '123'); return $this->fetch(); }
			//变量替换
			1: fetch()/display() 中传入 $replace
			2: config: 'view_replace_str' => [ '__CSS__' => '/static/css' ]
			/* View 中的默认替换
				'__ROOT__' 		=> 	$root 
				'__URL__'		=>	$base . '/' . $request->module() . '/' . Loader::parseName($request->controller())
				'__STATIC__'	=>	$root . '/static'
				'__CSS__'		=>	$root . '/static/css'
				'__JS__'    	=> 	$root . '/static/js' */
					
	B: 模板 template
			// {literal} .. {/literal}	该标签引起的内容不会编译成 PHP 代码
			// {/*  ..  */}				注释,该标签引起的内容会被丢弃
		a: 系统变量  {$Think.<var>}
			1: $Think.env		//env 环境变量 			eg: {$Think.env.PATH}			获取环境变量 PATH
			2: $Think.const		//系统常量
			3: $Think.server	//server 变量			eg: {$Think.server.HTTP_HOST}	获取 http host
			4: $Think.session	//session 变量			eg: {$Think.session.email}		获取 session 中的变量 email
			5: $Think.cookie	//cookie 变量			eg: {$Think.cookie.email}		获取 cookie 中的变量 email
			6: $Think.request	//request 请求			eg: {$Think.request.id}			获取 request 请求中的 id 参数值
			7: $Think.get		//GET 请求
			8: $Think.post		//POST 请求
		b: 管道符 '|': 模板函数
			1: 使用占位符 ###, 可作为函数任意位置的参数
				eg: {$time|date="Y-m-d",###}	==>		date("Y-m-d",$time);
					{$str|substr=###,0,8}		==>   	substr($str, 0, 8);
			2: 若变量是第一个参数, 则占位符可省略
				eg: {$str|substr=0,8}	==>   substr($str, 0, 8);
					{$str|md5}			==>   md5($str);
			3: 管道符可以连续使用
				eg: {$str|md5|strtoupper}		==>		strtoupper(md5($str));
		c: 内置函数
			1: default($var,$default)		当变量不存在时, 使用设置的默认值	eg: {$email|default="123@qq.com"}
		d: 原生标签  {php} {/php}	<?php  ?>
			模板文件中不建议 使用原生标签, 业务逻辑尽量在 controller 中完成	
		//循环标签
		a: {volist} 	 //{volist name="" id="" offset="" length="" mod="" empty="" key="i"}  {$i},{$mod} {/volist}	
			1: name			要遍历的变量名
			2: id 			遍历元素变量
			3: offset 		遍历开始位置(index)
			4: length 		最大的遍历长度
			5: mod			产生一个变量 $mod, 每次 $mod 为循环计算索引对给出值的余 
			6: empty		当变量为空的时候, 输出该值, 允许变量
			7: key			索引变量,默认 i(即使用 $i)
					eg: {volist name="userList" id="user" offset="3" length="4" mod="3" key="i" }  <p>{$i}:{$mod}:{$user.name}</p>  {/volist}
						==> 3:0:xxx  4:1:xxx  5:2:xxx  6:0:xxx  
		b: {foreach}	//{foreach $list as $var} {/foreach}    原生 foreach 方式
				//{foreach name="list" item="" key="key"} {/foreach} 
			1: name			要遍历的变量名
			2: item			遍历元素变量
			3: key			(默认 key)索引数组: index; 关联数组: key
					eg: {foreach $userList as $user}  <p>{$key}:{$user.name}</p>  {/foreach}
						{foreach name="userList" item="user" key="key"} <p>{$key}:{$user.name}</p> {/foreach}
		c: {for}		//{for start="" end="" name="i" step=""}  {/for}	
			1: start		变量初始值
			2: end			循环变量 < end
			3: name			循环变量(默认 i)
			4: step			每次循环 循环变量的增长值
					eg: {for start="0" end="5" name="i" step="2"} <p>{$i}</p> {/for}	==>    0 2 4
		//比较标签 {xx name="" value=""} {else/} {/xx}	//name 默认使用变量, 可以不加 $  //value 默认使用字符串, 需要加上 $
		a: {eq} 		//name == value		等价于 {equal} 	 	
		b: {neq}		//name != value		等价于 {notequal} 
		c: {gt}			//name >  value
		d: {egt}		//name >= value
		e: {lt}			//name <  value
		f: {elt}		//name <= value
					eg: {eq name="a" value="$b"} $a==$b {else/} $a!=$b {/eq} 
		//选择标签
		a: {switch}		//{switch name=""} {case value=""}{/case} {default/} {/switch}
			1: name			要比较的变量
			2: value		分支选择的值	//在 value 中使用管道符 '|', 可以实现一个分支多个选择	eg: {case value="1|2|3"}  
		b: {in}			//{in name="" value=""} {else/} {/in}
			1: name			要比较的变量
			2: value		多个值 ',' 隔开, 判断是否在这些值中
		c: {notin}		//{notin name="" value=""} {else/} {/notin}
			1: value		多个值 ',' 隔开, 判断是否不在这些值中
		d: {between}	//{between name="" value=""} {else/} {/between}
			1: value		两个值 ',' 隔开, 判断是否在两值之间(闭区间)
		e: {notbetween}	//{notbetween name="" value=""} {else/} {/notbetween}
			1: value		两个值 ',' 隔开, 判断是否不在两值之间(开区间)
		e: {range}		//{range name="" value="" type=""} {else/} {/range}
			//type 值
			1: in/notin				等价于 {in} / {notin}
			3: between/notbetween	等价于 {between} / {notbetween}
		f: {defined}	//判断变量是否定义 {defined name=""} {else/} {/defined}
			1: name			要判断的变量
		g: {if}			//{if condition=""} {else/} {/if}
			1: condition	判断条件	eg: condition="($Think.get.level == 1) OR ($Think.get.level == 2)"
		//模板的布局

五: Model 模型层
	A: think\Db 	//用于操作数据库的类
		//连接数据库
		a: connect()	//静态 //连接数据库, 返回 连接变量
			1: 在 config 配置数据库信息, 直接调用 connect() 方法获取连接
			2: 通过 connect("mysql://<username>:<password>@<host>:<port>/<database>#utf8") 获取连接
					eg: $link = connect("mysql://root:root@127.0.0.1:3306/demo#utf8"); 
		//执行 sql 语句
		a: execute($sql,$bind=[])	//返回 受影响的行数
		b: query($sql,$bind=[])	//返回 查询结果(数组)	
			1: 在 $sql 中可以使用 ? 作为占位符, 在 $bind 数组中设置占位符对应的变量 //字符串 会在 $sql 中自动添加 引号
					eg: $res = Db::query("select * from user where id=? and name like ?",[1,'%q%']); //select * from user where id=1 and name like '%q%'
		//指定表, 返回 Query
		a: table($table)		//静态 //加前缀指定表
		b: name($table)			//静态 //不加前缀指定表(需要配置前缀 config: 'database' => [ 'prefix' => '' ])
	
	B: think\db\Query	
				//$data 数组的 key 对应字段名, value 对应字段值;  $dataSet 是一个包含多个 $data 的二维数组
		a: 条件构造器	/* 推荐使用 3: where($filed,$op,$value), 返回 $this, 可以链式编程 */
			//and 条件构造
			1: where($str)					//$str 作为条件			eg: where("id=1")	==>		id = 1
			2: where($filed,$value)			//$field = $value		eg: where("id",1)	==>		id = 1
			3: where($filed,$op,$value)		//根据 $op 操作符比较 $filed 和 $value	
				//$op 取值: eq,=, neq,<>, lt,<, elt,<=, gt,>, egt,>=, between,notbetween, in,notin
				//当 $op='between'|'notbetween', $value 为 "?,?" 或 [?,?]		eg: where('id','notbetween',[1,5])		==>		id not between 1 and 5
				//当 $op='in'|'notin', $value 为 "?,?,.." 或 [?,?,..]			eg: where('id','notin','1,3,4,5,6')		==>		id not in (1,3,4,5,6)
			4: where([$filed=>$value,..])	//多个字段值的比较
			5: where([$f=>[$op,$value],..])	//多个字段值的根据操作符的比较
					eg: where([ 'id'=>1,'age'=>['between',[1,2]] ]);	===>	id = 1 and age between 1 and 2
			6: where($field,'exp',$exp)		//条件为 $field.$exp	eg: where('id','exp','not in (1,2,3)')		==>		id not in (1,2,3)
			//or 条件构造
			1: whereOr(..)					//or 一个条件,跟 where() 一样		eg: where('id',1)->whereOr('id',2)	==>		id = 1 or id = 2
		a: 查询	
			1: select()					//执行查询, 返回 记录集 (二维数组)
			2: find()					//执行查询, 返回 一条记录 (一维数组)
			3: column($field)			//执行查询, 返回 一条记录的单个字段 (字段值)
			4: value($field)			//执行查询, 返回 记录集的单个字段的数组	(一维数组)
		b: 插入
			1: insert($data=[])			//执行插入, 返回 受影响的行数
			2: insertGetId($data=[])	//执行插入, 返回 自增 ID
			3: insertAll($dataSet)		//批量插入记录, 返回 受影响的行数
		c: 修改
			1: update($data=[])			//执行修改, 返回 受影响的行数
			2: setField($field,$value='')	//修改字段	($field 为字符串时, 修改单个字段; $filed 为数组时, 修改多个字段)
			3: setInc($field,$step=1)	//修改单个字段 自增 $step, 返回 受影响的行数
			4: setDec($field,$step=1)	//修改单个字段 自减 $step, 返回 受影响的行数
		d: 删除
			1: delete()					//执行删除, 返回 受影响的行数
			2: delete(主键值)			//根据主键删除, 返回 受影响的行数
		e: 聚合函数
			1: count()					//获取记录条数		eg: Db::table("user")->where('id','>',3)->count();
			2: max($field)				//获取字段的最大值	eg: Db::table("user")->where('id','>',3)->max('id');
			3: min($field)				//获取字段的最小值
			4: avg($fiel)				//获取字段的平均值	eg: Db::table("user")->where('id','>',3)->avg('id');
			5: sum($field)				//获取字段的和
		f: 其他
			1: buildSql()				//返回 SQL 语句
			2: field($field)			//指定 查询字段		eg: Db::table("user")->field("id,name,age")->select();
			3: order($field,$order)		//指定 排序条件		eg: order('id','desc')	或	order(['id'=>'desc','age'=>'asc'])
			4: limit($off,$len=null)	//指定 查询数量		eg: limit(5,10)	 ==>  从 5 开始的 10 条记录
			5: page($page,$row=null)	//指定 分页			eg: page(5,10)	 ==>  第 5 页每页 10 条记录
			6: group($group)			//指定 group		eg: group('age') ==>  根据 age 字段分组
		
	C: think\Model		//混合 Query,可以使用 Query 的方法 //查询返回的每条记录 为 Model 对象 (单条为对象,多条为对象数组
		a: Model 对象
			1: 对象->字段名				//获取该对象对应字段的字段值	eg: $id = User::get(1)->user_id
			2: 对象->toArray()			//将对象的所有字段转成一个一维数组(字段名为 key,字段值为 value)		eg: $res = User::get(1)->toArray();
			3: 对象->getData()			//与 toArray() 一样, 但是该方法获取原始数据, 不通过 getXxxAttr()
		b: 条件构造 		//返回 Query 后, 可以直接使用 Query 的方法, 执行增删改查, 但是返回的每条记录是 Model 对象
			1: where()					//静态 //返回 Query, 方法与 Query 的 where() 一致	
			2: whereOr()				//静态 //返回 Query, 方法与 Query 的 whereOr() 一致	
		c: 模型查询
			//$data 为主键值, 则查询主键的记录;  $data 为 function($query){ $query->where(); .. }, 则为添加条件查询
			1: get($data)				//静态 //查询单条记录, 返回 Model 对象
			2: all($data)				//静态 //查询所有记录, 返回 Model 对象数组	//$data 主键可以通过 [?,?,..] 方式查询多个主键记录
			3: value()					//静态 //Query, 返回 字段值
			4: column()					//静态 //Query, 返回 数组
		d: 模型插入
			//$data 为数据数组, key 对应字段名, value 对应字段值
			1: create($data,$field=null)	//静态 //插入单条记录, 返回 Model 对象	//$field = true, 自动排除不存在的字段; $field=[..], 允许插入的字段
			2: save($data=[])				//插入/更新 单条记录, 返回 受影响的行数. $data=[],保存当前对象的数据; $data!=[] 保存 $data 中的数据. 未填写主键时为插入操作
			3: saveAll($dataSet)			//插入/更新 多条记录, 返回 Model 对象数组. $dataSet 二维数组, 元素为 数据数组
		e: 模型修改
			//$data 为数据数组, key 对应字段名, value 对应字段值;  当 $data 中存在主键, 会根据主键更新, 则不需要添加查询条件
			//$where=[..], 则根据数组数据查询; $where 为 function($query){ $query->where(); .. }, 则为添加条件查询		eg: update(User::get(1),['id'=>1],true)
			1: update($data,$where=[],$field=[])	//静态 //更新单条记录, 返回 Model 对象. $field = true, 自动排除不存在的字段; $field=[..], 允许插入的字段								
			2: where()->update($data)		//Query, 返回 受影响的行数	(建议使用)
			3: save($data=[],$where=[])		//返回 受影响的行数. $data=[],当前对象则需要提供 主键
			4: saveAll($dataSet)			//返回 Model 对象数组. $dataSet 中的每个元素都应当提供 主键
		f: 模型删除 
			//$data 为主键值,单个删除;  $data 主键列表, 批量删除;  $data 为 function($query){ $query->where(); .. }, 将查询的所有记录删除
			1: destroy($data)			//静态 //删除, 返回 受影响的行数
			2: delete()					//删除当前对象
			3: where()->delete()		//Query, 返回 受影响的行数
		g: 其他
			1: allowField($field)		//设置允许写入的字段, 返回 $this  //$field = true, 自动排除不存在的字段; $field=[..], 允许插入的字段
			2: count()					//静态 //Query, 获取记录条数
			3: max,min,avg,sum			//静态 //Query, 获取字段的最大值,最小值,平均值,和
			
	D: 模型获取器,修改器,自动完成,模型时间戳,软删除
		a: 模型获取器: getXxxAttr()  获取字段的方法
			1: public function getXxxAttr($val) { return $val; }	//修改返回值后, getData() 可以获取原始数据
					eg: class User extends Model { 
							public function getSexAttr($val){ 
								switch($val){ case '0': return '男'; case '1': return '女'; default: return '未知'; } 
							} 
						}
			2: public function getXxxAttr($val,$data) { return $val; }		//$data 为获取数据时的数据数组
		b: 模型修改器: setXxxAttr()  设置字段的方法
			1: public function setXxxAttr($val) { return $val; }			//设置字段值的方法
			2: public function setXxxAttr($val,$data) { return $val; }		//$data 为设置数据时的数据数组
		c: 自动完成
			1: protected $auto = [ '','',.. ];		//在执行 insert/update 操作时, 自动调用配置的字段的 setXxxAttr()
			2: protected $insert = [ '','',.. ];	//在执行 insert 操作时, 自动调用配置的字段的 setXxxAttr()
			3: protected $update = [ '','',.. ];	//在执行 update 操作时, 自动调用配置的字段的 setXxxAttr()
					eg: class User extends Model {
							protected $insert = [ 'time_insert' ];	//设置在 insert 时,自动调用 setTimeInsertAttr()
							public function setTimeInsertAttr() { return time(); } 
						}
		d: 模型时间戳
			//不建议开启 1: config: 'database' => ['auto_timestamp' => false]		//全局修改, 自动写入时间戳字段
			2: protected $autoWriteTimestamp = true;			//开启自动写入时间戳. insert 时写入 $createTime 和 $updateTime;  update 时写入 $updateTime
			3: protected $createTime = 'create_time';			//创建时间字段. 当为 false 时, 关闭自动写入创建时间戳
			4: protected $updateTime = 'update_time';			//更新时间字段. 当为 false 时, 关闭自动写入更新时间戳
		e: 软删除
			//添加一个删除时间戳字段 delete_time, delete_time = NULL 代表未删除, delete_time != NULL 代表软删除
			//开启软删除后, 删除操作变成更新 delete_time; 查询时,若 delete_time 不为 NULL, 则不能查询出该数据
			1: 开启软删除  traits\model\SoftDelete
					eg: use traits\model\SoftDelete;
						class User extends Model {
							use SoftDelete;
						}
			2: protected $deleteTime = 'delet_time'				//Model 类更改软删除字段.
			2: think\Model::withTrashed(true)					//可以查询软删除数据, 返回 Query
					eg: class Index { public function index() { $res = User::withTrashed(true)->where()->select(); } }
			3: think\Model::onlyTrashed()						//只获取软删除的数据, 返回 Query	eg: $res = User::onlyTrashed()->select();
			4: think\Model::destroy($data,true)					//彻底删除
			5: delete(true)										//Query, 彻底删除 
			
六: helper.php 方法(助手函数)
	a: request()					//获取 Request 对象
	b: session($name,$value='')		//获取,设置或删除 session 数据
		1: session($name)				获取 session 数据
		2: session($name,$value)		设置 session 数据
		3: session($name,null)			删除 session 数据
	c: cookie($name,$value='',$options=null)	//获取,设置或删除 cookie 数据
		1: cookie($name)							获取 cookie 数据 
		2: cookie($name,$value,$time)				设置 cookie 数据, 有效 $time 秒
	d: input($key='',$default=null)		//获取参数, $key 不存在则返回 $default		
		// get, post, param, request, session, cookie, env, file
		1: input($key)						获取 $key 的值		eg: $res = input('id');
		2: input("$method.$key")			指定方法获取值		eg: $res = input('post.id');  $res = input('param.id');
			
			
			


