package Java_多线程.线程安全问题;

/*
 *  为什么会出现线程安全问题?(也是我们判断是否有线程安全问题的标准)
 *  	A: 是否是多线程环境
 *  	B: 是否有共享数据
 *  	C: 是否有多条语句操作共享数据
 *  如何解决多线程安全问题?
 *  	基本思想: 让程序没有安全问题的环境
 *  	怎么实现?
 *  		把多个语句操作共享数据的代码给锁起来,让任意时刻只能有一个线程执行即可,为此Java提供了同步机制
 *  
 *  同步的前提
 *  	A: 多个线程
 *  	B: 多个线程使用的是同一个锁对象
 *  同步的好处
 *  	同步的出现解决了多线程的安全问题
 * 	同步的弊端
 * 		A: 当线程相当多的时,因为每个线程都会去判断同步上的锁,这是很耗费资源的,无形中会降低长须的运行效率
 * 		B: 如果出现了同步嵌套,就容易产生死锁问题
 * 			死锁问题: 是指两个或两个以上的线程在执行的过程中,因争夺资源	产生的一种互相等待现象
 * 	
 *  同步代码块
 *  	格式: synchronized(对象){需要同步的代码}
 *  	注意: 
 *  		A: 同步可以解决安全问题的根本原因就是在那个对象上,该对象如同锁的功能,多个线程必须是同一把锁
 * 			B: 同步代码块的锁对象可以是任意对象
 *  同步方法
 *  	格式: 把同步关键字加在到方法上   eg: public synchronized void 方法名(){} 
 *  	注意: 同步方法的的锁对象是 this
 * 	静态方法的锁对象是该类的字节码文件对象: 该类名.class
 */

public class 线程安全问题及同步
{
	public static void main(String[] args)
	{
		
	}
}
