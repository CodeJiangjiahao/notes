名词解析：
	1.形参：用来接收调用该方法时传递的参数。只有在被调用的时候才分配内存空间，一旦调用结束，就释放内存空间。因此仅仅在方法内有效。
	2.实参：传递给被调用方法的值，预先创建并赋予确定值。
	3.传值调用：传值调用中传递的参数为基本数据类型，参数视为形参。
	4.传引用调用：传引用调用中，如果传递的参数是引用数据类型，参数视为实参。在调用的过程中，将实参的地址传递给了形参，形参上的改变都发生在实参上
	

总结：
	1.java的基本数据类型是传值调用，对象引用类型是传引用。
	2.当传值调用时，改变的是形参的值，并没有改变实参的值，实参的值可以传递给形参，但是，这个传递是单向的，形参不能传递回实参。
	3.当引用调用时，如果参数是对象,如果改变了对象的内容，就会改变实参对象的内容。
	
	
	注意: 当实参是引用数据类型时,通过形参引用可以修改实参的值;但若形参引用指向其他对象,则该形参引用与实参将无关联
	eg: 
		public static void main(String[] args)
		{	
			StringBuffer sb = new StringBuffer("aaaaa");
			System.out.println(sb);					//aaaaa
			ss(sb);									//调用方法
			System.out.println(sb); 				//aaaaabbbbb
		}
		public static void ss(StringBuffer ssb)
		{
			ssb.append("bbbbb");					//通过ssb修改实参sb的值
			ssb = new StringBuffer("46464646");		//ssb指向其他对象
			ssb.append("cccccc");					//此处虽通过ssb修改值,但已经与实参sb无关联
		}
		
	在  C++ 中 不能改变引用的指向,引用指向一个变量或对象后就永远绑定了;Java中的形参引用指向实参,但该指向却能够发生改变,使形参不指向实参