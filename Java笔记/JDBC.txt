JDBC: Java Data Base Connectivity(Java数据库连接),可以为多种数据库提供统一访问.

A: JDBC各种连接方式
	1: JDBC + ODBC桥
		特点: 需要数据库的ODBC驱动,仅适用于微软的系统
	2: JDBC + 厂商API方式
		特点: 厂商API一般使用C编写
	3: JDBC + 厂商DataBase Connection (Server + DataBase)方式
		特点: 在Java与DataBase之间架起一台专门用于数据库连接的服务器(一般由数据库厂商提供)
	4: JDBC + DataBase的连接方式
		特点: 这使得Application与数据库分开,开发者只需关注内部逻辑的实现而不需注重数据库连接的具体实现

B: JDBC加载驱动并获取数据库连接
	a: 加载驱动程序: Class.forName(String driverClass);
		1: 加载MySQL驱动: Class.forName("com.mysql.cj.jdbc.Driver");	(导入jar包: mysql-connector-java)
		2: 加载Oracle驱动: Class.forName("oracle.jdbc.driver.OracleDriver");	
	b: 获取数据库连接	(java.sql.Connection,java.sql.DriverManager)
		Connection coon = DriverManager.getConnection(String URL,String username,String password);
		注意: 在数据库 URL中设置serverTimezone属性		
			URL: "jdbc:mysql://localhost:3306/数据库名称" + "?serverTimezone=GMT%2B8";
				eg: "jdbc:mysql://localhost:3306/lemting" + "?serverTimezone=GMT%2B8";
			还可以设置字符集等参数: "characterEncoding=utf8"
	
C: JDBC编程步骤(JDBC + DataBase)
	a: 加载驱动并获取数据库连接: Connection coon
	b: 创建Statement对象   (java.sql.Statement)
		Statement stmt = coon.createStatement();
	c: 向数据库发送SQL命令
		ResultSet rs = stmt.executeQuery("select user_name,age from imooc_goddess");
	d: 处理数据库的返回结果(ResultSet类)
		syso(rs.getString("user_name") + ", " + rs.getInt("age"));

		eg: final String url = "jdbc:mysql://localhost:3306/lemting" + "?serverTimezone=GMT%2B8";  //数据库网址
			final String username = "root";		//用户名
			final String password = "lemting";	//用户密码
			Class.forName("com.mysql.cj.jdbc.Driver"); //加载驱动程序
			Connection coon = DriverManager.getConnection(url,username,password); //获取数据库连接
			Statement stmt =  coon.createStatement(); //创建Statement对象
			ResultSet rs = stmt.executeQuery("select * from imooc_goddess"); //通过Statement对象执行SQL语句,获取返回结果
			//输出SQL语句执行结果
			while(rs.next())
				System.out.println(rs.getString("user_name") + ", " + rs.getInt("age"));
	--------------------------------------------------------------------------------------------------------------------------------
	a: 加载驱动并获取数据库连接: Connection coon
	b: 编写SQL语句
		String sql = "select * from imooc_goddess where id=?";
	c: 预编译(创建Statement对象)
		PreparedStatement ptmt = coon.prepareStatement(sql);
	d: 设置SQL语句中的参数
		ptmt.setInt(1, id);ptmt.setString(1,id);ptmt.setDate(1,new java.sql.Date(id.getTime()));...
	e: 执行SQL语句
		ptmt.execute(); //运行语句,返回是否有结果集boolean
		ResultSet rs =  ptmt.executeQuery();  //运行语句,返回ReaultSet对象
		
		eg: final String url = "jdbc:mysql://localhost:3306/lemting" + "?serverTimezone=GMT%2B8";  //数据库网址
			final String username = "root";		//用户名
			final String password = "lemting";	//用户密码
			Class.forName("com.mysql.cj.jdbc.Driver"); //加载驱动程序
			Connection coon = DriverManager.getConnection(url,username,password); //获取数据库连接
			String sql = "select * from imooc_goddess where id=?";//sql语句
			PreparedStatement ptmt = coon.prepareStatement(sql); //预编译
			ptmt.setInt(1, id);//设置参数
			ResultSet rs =  ptmt.executeQuery();//执行SQL查询语句
			
D: 调用存储过程
	a: 调用无参存储过程
		1: 加载驱动并获取数据库连接: Connection coon
		2: 获得Statement对象,调用perpareCall("call 过程名()")方法	(java.sql.CallableStatement)
			CallableStatement c = coon.perpareCall("call sp_select_nofilter()");
		3: 执行存储过程
			c.execute();
		4: 获取执行结果
			ResultSet rs = c.getResultSet();
	b: 调用含输入参数存储过程
		1: 加载驱动并获取数据库连接: Connection coon
		2: 获得Statement对象,调用perpareCall("call 过程名(?,...)")方法,并在其中用?代表输出参数	(java.sql.CallableStatement)
			CallableStatement cs = coon.perpareCall("call sp_select_filter(?)");
		3: 设置参数
			cs.setInt(1, id);cs.setString(1,id);cs.setDate(1,new java.sql.Date(id.getTime()));...
		4: 执行存储过程
			cs.execute();
		5: 获取执行结果
			ResultSet rs = cs.getResultSet();
	c: 调用含输出参数存储过程
		1: 加载驱动并获取数据库连接: Connection coon
		2: 获得Statement对象,调用perpareCall("call 过程名(?,...)")方法,并在其中用?代表输出参数	(java.sql.CallableStatement)
			CallableStatement cs = coon.perpareCall("call sp_select_filter(?)");
		3: 注册输出参数
			cs.registerOutParameter(1, Types.INTEGER);cs.registerOutParameter(1, Types.DATE);...
		4: 执行存储过程
			cs.execute();
		5: 获取输出参数
			cs.getInt(1);c.getString(1);
	d: 调用含输入输出参存储过程
		1: 加载驱动并获取数据库连接: Connection coon
		...

E: 事务管理
		事务(Transaction)是作为单个逻辑工作单元执行的一系列操作
		这些操作作为一个整体一起向系统提交,要么都执行,要么都不执行
	a: 事务的特性
		1: 原子性(Atomicity): 事务是一个完整的操作
		2: 一致性(Consistency): 当事务完成时,数据必须处于一致状态
		3: 隔离性(Isolation): 对数据进行修改的所有并发事务是彼此隔离的
		4: 持久性(Durability): 事务完成后,它对数据库的修改被永久保持
	b: JDBC对事物管理的支持
		1: 通过提交commit()或是回退roolback()来管理事务的操作
		2: 事务操作默认是自动提交
		3: 可以通过调用setAutoCommit(false): 禁止自动提交
	c: 代码实现事务管理
		1: 关闭自动提交
			coon.setAutoCommit(false);
		2: 将影响数据库信息的代码try...catch
			若代码执行正常,则正常提交;若代码报错,则会在catch中回滚事务
		3: 在try的最后提交事务
			coon.commit();
		4: 在catch()中回滚事务
			coon.roolback();
	
F: 连接池
	常用的开源数据库连接池dbcp,c3p0
	a: dbcp
		1: 导入相关jar包
			(commons-dbcp2.jar),(commons-pool2.jar),(commons-logging.jar)
		2: 在项目根目录下增加配置文件: dbcp.properties
			配置文件属性: 
				1: driverClassName: 使用JDBC驱动的完整有效的Java类名
				2: url: 传递给JDBC驱动的用于建立连接的URL
				3: username: 传递给JDBC驱动的用于建立连接的用户名
				4: password: 传递给JDBC驱动的用于建立连接的密码
				5: maxActive: 最大活动连接: 连接池在同一时间能够分配的最大活动连接的数量,若设置为非正数则表示不限制
				6: maxIdle: 最大空闲的连接: 连接池中容许保持空闲状态的最大连接数量,超过的空闲连接将被释放,若设置为负数则表示不限制
				7: maxWait: 最大等待时间(毫秒): 当没有可用连接时,连接池等待连接被归还的最大时间,超过时间则抛出异常,若设置为-1则无限等待
				8: initialSize: 初始化连接: 连接池启动时创建的个数
		3: 编写类文件,创建连接池
			加载配置文件: Properties properties = new Properties();
						  properties.load(new FileInputStream("配置文件路径"));
			创建数据源: DataSource ds = BasicDataSourceFactory.createDataSource(properties);
			连接数据库: Connection coon = dataSource.getConnection();	
	b: c3p0
			c3p0是一个开源的JDBC连接池,它实现了数据源和JNDI绑定,支持JDBC3和JDDBC2的标准扩展
		1: 导入相关jar包
			(c3p0-0.9.2-pre4.jar),(mchange-commons-java.jar)
		2: (可在连接数据库时设置)在项目根目录下增加配置文件: c3p0.properties	
			配置文件属性: 
				1: c3p0.driverClass: 使用JDBC驱动的完整有效的Java类名
				2: c3p0.jdbcUrl: 传递给JDBC驱动的用于建立连接的URL
				3: c3p0.user: 传递给JDBC驱动的用于建立连接的用户名
				4: c3p0.password: 传递给JDBC驱动的用于建立连接的密码
		3: 编写类文件,创建连接池
			创建数据源: ComboPooledDataSource ds = new ComboPooledDataSource();
			设置参数: 
				ds.setDriverClass("com.mysql.cj.jdbc.Driver");
				ds.setJdbcUrl("jdbc:mysql://localhost:3306/lemting" + "?serverTimezone=GMT%2B8");
				ds.setUser("root"); ds.setPassword("root");
				...
			连接数据库: java.sql.Connection coon = ds.getConnection();
	c: dbcp和c3p0的比较
					  DBCP													C3P0
				Spring组织推荐使用									Hibernate组织推荐使用
		强制关闭连接或者数据库重启后,无法自动连接			强制关闭连接或者数据库重启后,可以自动连接
			没有自动的去回收空闲连接的功能						  	自动回收空闲连接功能
		DBCP有着比C3P0更高的效率,可能出现丢失连接					   C3P0稳定性较高
				DBCP提供最大连接数									C3P0提供最大空闲时间
				DBCP并没有相应的功能				C3P0可以控制数据源内加载的PreparedStatements数量,并且可以设置帮助线程的数量来提升JDBC操作的速度

				
				
				
JDBC常用类和接口(java.sql.*): 
				Connection: 连接到数据库
				Statement: 建立操作指令
						Statement对象用于将SQL语句发送到数据库中.
						实际上有三种Statement对象,它们都作为在给定链接上执行SQL语句的包容器: 
							Statement,PreparedStatement(它从Statement继承而来)和CallableStatement(它从PreparedStatement继承而来)它们都专用于发送特定类型的SQL语句：
								1: Statement 对象用于执行不带参数的简单的SQL语句;Statement接口提供了执行语句和获取结果的基本方法
								2: PerparedStatement 对象用于执行带或不带IN参数的预编译SQL语句;PeraredStatement接口添加处理IN参数的方法
								3: CallableStatement 对象用于执行对数据库已存储过程的调用;CallableStatement添加处理OUT参数的方法
					Statement提供了许多方法，最常用的方法如下: 
						1: execute(): 运行语句,返回是否有结果集
						2: executeQuery(): 运行查询语句,返回ReaultSet对象
						3: executeUpdata(): 运行更新操作,返回更新的行数
						4: addBatch(): 增加批处理语句
						5: executeBatch(): 执行批处理语句
						6: clearBatch(): 清除批处理语句
				ResultSet: 获得查询结果
	a: Connection	
			与特定数据库的连接(会话).执行SQL语句并在连接的上下文中返回结果
		成员方法: 
			1: Statement createStatement(): 创建一个Statement对象,用于将SQL语句发送到数据库
			2: PreparedStatement prepareStatement(String sql): 创建一个PreparedStatement对象,用于将参数化的SQL语句发送到数据库
			3: CallableStatement prepareCall(String sql): 创建一个CallableStatement对象来调用数据库存储过程
			4: void close(): 释放此Connection对象的数据库和JDBC资源
	b: Statement
			用于执行静态SQL语句并返回其生成的结果的对象
		成员方法: 		
			1: boolean execute(String sql): 执行给定的SQL语句,这可能会返回多个结果(返回值: 是否有结果集)
			2: ResultSet executeQuery(String sql): 执行给定的SQL语句,返回单个ResultSet对象
			3: int executeUpdate(String sql): 执行给定的SQL语句,这可能是INSERT,UPDATE,或DELETE语句,或者不返回任何内容(返回值: 更新(受影响)行数)
			4: void addBatch(String sql): 将给定的SQL命令添加到此Statement对象的当前命令列表中
			5: void clearBatch(): 清空这个Statement对象当前的SQL命令列表
			6: int[] executeBatch(): 将一批命令提交到数据库以执行,并且所有命令都执行成功,返回一个更新计数的数组
			7: ResultSet getResultSet(): 以ResultSet对象的形式获取当前结果
	c: PreparedStatement
			Statement的子接口,表示预编译的SQL语句的对象.SQL语句已预编译并存储在PreparedStatement对象,然后可以使用该对象多次有效地执行此语句
		成员方法: 
			1: 见Statement成员方法
			2: setXxx(int parameterIndex,Xxx x): 将指定的参数设置为指定的Xxx对象(parameterIndex: 参数位置(从1开始的在SQL语句中用?表示的占位符的索引),x: 参数值)
				setArray(),setBoolean(),setByte(),setBytes(),setDate(),setDouble(),setInt(),setString(),setTime(),...
			3: void clearParameters(): 立即清除当前参数值
	d: CallableStatement	
			PreparedStatement的子接口,CallableStatement对象提供了设置其IN和OUT参数的方法,以及执行对存储过程的调用的方法
			所有OUT参数必须在执行存储过程之前必须进行注册,通过registerOutParameter()方法
		成员方法:
			1: 见Statement成员方法
			2: 见PreparedStatement成员方法
			3: getXxx(int parameterIndex): 获取指定位置的参数值(parameterIndex: 从1开始的在SQL语句中用?表示的占位符的索引)
				getArray(),getBoolean(),getByte(),getBytes(),getDate(),getDouble(),getInt(),getString(),getTime(),...
			4: getXxx(String parameterName): 根据参数名获取参数值
				getArray(),getBoolean(),getByte(),getBytes(),getDate(),getDouble(),getInt(),getString(),getTime(),...
			5: void registerOutParameter(int parameterIndex,int sqlType): 注册序号parameterIndex中的OUT参数,指定为sqlType类型(sqlType应为java.sql.Types.类型)
			6: void registerOutParameter(int parameterIndex,int sqlType,int scale): 注册序号parameterIndex中的OUT参数(scale: 小数点右侧所需的数字位数)
			7: boolean wasNull(): 检索读取的最后一个OUT参数的值是否为NULL
	e: ResultSet	
			表示数据库结果集的数据表,通常通过执行查询数据库的语句生成,ResultSet对象保持一个光标指向其当前的数据行
		成员方法: 
			1: boolean next(): 将光标从当前位置向前移动一行
			2: getXxx(int columnIndex): 获取当前行中指定列的值
				getArray(),getBoolean(),getByte(),getBytes(),getDate(),getDouble(),getInt(),getString(),getTime(),...
			3: getXxx(String columnLabel): 获取当前行中指定列的值
				getArray(),getBoolean(),getByte(),getBytes(),getDate(),getDouble(),getInt(),getString(),getTime(),...
			4: updateXxx(int columnIndex,Xxx x): 使用指定值更新指定的列
				updateArray(),updateBoolean(),updateByte(),updateBytes(),updateDate(),updateDouble(),updateInt(),updateString(),updateTime(),...
			5: updateXxx(String columnLabel,Xxx x): 使用指定值更新指定的列
				updateArray(),updateBoolean(),updateByte(),updateBytes(),updateDate(),updateDouble(),updateInt(),updateString(),updateTime(),...
			6: boolean first(): 将光标移动到此 ResultSet对象中的第一行
			7: void afterLast(): 将光标移动到这个ResultSet对象的最后一行,就在最后一行之后
			8: boolean absolute(int row): 将光标移动到此ResultSet对象中给定的行号
			9: boolean previous(): 将光标移动到此ResultSet对象中的上一行
			10: void close(): 释放此ResultSet对象的数据库和JDBC资源,而不是等待此事件在自动关闭时发生
	f: Types
			定义用于标识通用SQL类型的常量的类,称为JDBC类型,这个类永远不会被实例化
		静态字段:	(public static final int 类型) 
			1: DATE 
			2: TINYINT
			3: INTEGER 
			4: STRING
			5: VARCHAR 
			...
	

C3P0配置文件: 使用这两种方式进行配置时,只要将配置好的文件放入classpath文件夹下即可,在java代码当中不用显示的给出访问配置方式的代码,c3p0会自动识别！	
A: c3p0.properties
	c3p0.jdbcUrl=jdbc:mysql://localhost:3306/tv_guide	
	c3p0.driverClass=com.mysql.cj.jdbc.Driver
	c3p0.user=root
	c3p0.password=root
	 
	c3p0.initialPoolSize		//初始化连接池中的连接数,取值应在minPoolSize与maxPoolSize之间,默认为3
	c3p0.acquireIncrement		//当连接池中的连接耗尽的时候c3p0一次同时获取的连接数.默认值: 3
	c3p0.idleConnectionTestPeriod		//每多少秒检查所有连接池中的空闲连接.默认值: 0,不检查
	c3p0.maxIdleTime=60			//最大空闲时间,60秒内未使用则连接被丢弃.若为0则永不丢弃.默认值: 0
	c3p0.maxPoolSize=20			//连接池中保留的最大连接数.默认值: 15
	c3p0.maxStatements=100		//c3p0全局的PreparedStatements缓存的大小.默认值: 0
									如果maxStatements与maxStatementsPerConnection均为0,则缓存不生效,只要有一个不为0,则语句的缓存就能生效.
	c3p0.minPoolSize=5			//连接池中保留的最小连接数.默认为: 3
	c3p0.checkoutTimeout		//当连接池连接耗尽时,客户端调用getConnection()后等待获取新连接的时间,超时后将抛出SQLException,如设为0则无限期等待.单位毫秒.默认: 0 
	
	c3p0.acquireRetryAttempts	//定义在从数据库获取新连接失败后重复尝试的次数.默认值: 30;小于等于0表示无限次
	c3p0.acquireRetryDelay		//重新尝试的时间间隔,默认为: 1000毫秒
	c3p0.autoCommitOnClose		//关闭连接时,是否提交未提交的事务,默认为false,即关闭连接,回滚未提交的事务
	c3p0.automaticTestTable		//c3p0将建一张名为Test的空表,并使用其自带的查询语句进行测试.默认值: null
									如果定义了这个参数那么属性preferredTestQuery将被忽略.你不能在这张Test表上进行任何操作,它将只供c3p0测试使用
	c3p0.breakAfterAcquireFailure		//如果设为true,那么在尝试获取连接失败后该数据源将申明已断开并永久关闭.默认: false
								如果为false,则获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常,但是数据源仍有效保留,并在下次调用getConnection()的时候继续尝试获取连接.
	c3p0.maxStatementsPerConnection		//maxStatementsPerConnection定义了连接池内单个连接所拥有的最大缓存statements数.默认值: 0
	
	
B: c3p0-config.xml
	<?xml version="1.0" encoding="UTF-8"?>
	<c3p0-config>  
		<!-- This is default config! -->  
		<default-config>  
			<property name="initialPoolSize">10</property>  
			<property name="maxIdleTime">30</property>  
			<property name="maxPoolSize">100</property>  
			<property name="minPoolSize">10</property>  
			<property name="maxStatements">200</property>  
		</default-config>  
	  
		<!-- This is my config for mysql-->  
		<named-config name="mysql">  
			<property name="driverClass">com.mysql.jdbc.Driver</property>  
			<property name="jdbcUrl">jdbc:mysql://localhost:3306/jdbc?useUnicode=true&characterEncoding=UTF8</property>  
			<property name="user">root</property>  
			<property name="password"></property>  
			 <!-- 初始化连接池中的连接数，取值应在minPoolSize与maxPoolSize之间，默认为3-->
			<property name="initialPoolSize">10</property>
			<!--最大空闲时间，60秒内未使用则连接被丢弃。若为0则永不丢弃。默认值: 0 -->  
			<property name="maxIdleTime">30</property>  
			<!--连接池中保留的最大连接数。默认值: 15 -->
			<property name="maxPoolSize">100</property> 
			<!-- 连接池中保留的最小连接数，默认为：3--> 
			<property name="minPoolSize">10</property> 
			<!--c3p0全局的PreparedStatements缓存的大小。如果maxStatements与maxStatementsPerConnection均为0，则缓存不生效，只要有一个不为0，则语句的缓存就能生效。如果默认值: 0--> 
			<property name="maxStatements">200</property>  
			<!-- 当连接池连接耗尽时，客户端调用getConnection()后等待获取新连接的时间，超时后将抛出SQLException，如设为0则无限期等待。单位毫秒。默认: 0 -->   
			<property name="checkoutTimeout" value="3000"/> 
			<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。默认值: 3 -->   
			<property name="acquireIncrement" value="2"/> 
			<!--定义在从数据库获取新连接失败后重复尝试的次数。默认值: 30 ；小于等于0表示无限次-->   
			<property name="acquireRetryAttempts" value="0"/>  
			<!--重新尝试的时间间隔，默认为：1000毫秒-->   
			<property name="acquireRetryDelay" value="1000" /> 
			<!--关闭连接时，是否提交未提交的事务，默认为false，即关闭连接，回滚未提交的事务 -->   
			<property name="autoCommitOnClose">false</property>  
			<!--c3p0将建一张名为Test的空表，并使用其自带的查询语句进行测试。如果定义了这个参数那么属性preferredTestQuery将被忽略。你不能在这张Test表上进行任何操作，它将只供c3p0测试使用。默认值: null -->   
			<property name="automaticTestTable">Test</property> 
			 <!--如果为false，则获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常，但是数据源仍有效保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试获取连接失败后该数据源将申明已断开并永久关闭。默认: false-->   
			<property name="breakAfterAcquireFailure">false</property>
			<!--每60秒检查所有连接池中的空闲连接。默认值: 0，不检查 -->   
			<property name="idleConnectionTestPeriod">60</property>    
			<!--maxStatementsPerConnection定义了连接池内单个连接所拥有的最大缓存statements数。默认值: 0 -->   
			<property name="maxStatementsPerConnection"></property> 
		</named-config>  
	  
		<!-- This is my config for oracle -->  
		<named-config name="oracle">  
			<property name="driverClass">oracle.jdbc.driver.OracleDriver</property>  
			<property name="jdbcUrl">jdbc:oracle:thin:@localhost:1521:orcl</property>  
			<property name="user">scott</property>  
			<property name="password">liang</property>  
			<property name="initialPoolSize">10</property>  
			<property name="maxIdleTime">30</property>  
			<property name="maxPoolSize">100</property>  
			<property name="minPoolSize">10</property>  
			<property name="maxStatements">200</property>  
		</named-config>  
	</c3p0-config>
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			