字体: Unicode->Consolas

// body { font-size: 14px; text-align: center; padding: 0; margin: 0; } /* 设置全局字体14px,文本居中,无内外填充 */

CSS: Cascading Style Sheets 层叠样式表

CSS的主要目的: 是能给HTML标记添加各式各样的表现(格式,样式). 比如: 文字样式,背景,文本样式,链接样式,...

CSS是给HTML加的样式,JavaScript是给HTML标记加的行为

HTML引入CSS的方法
	a: 嵌入式
		通过<style>标记,来引入CSS样式,只能给当前网页来使用
		<style type="text/css"></style>
	b: 外联式
		通过<link>标记,来引入一个外部的CSS文件(.css),可以实现公共的CSS代码被多个网页共享
		<link rel="stylesheet" type="text/css" href=CSS文件路径 />
			属性: rel: 引入的文件类型, type: 内容类型, href: CSS文件路径
			<link>标记放在<head>中
	C: 行内式(主要用于JS控制元素的样式)
		每一个HTML标记中都有一些公共的属性: class,id,title,style
		行内样式优先级最高
	
CSS语法格式: 选择器 + 格式声明语句
	<style type="text/css" >
		选择器{声明;声明;...;}
	</style>
	
	a: 选择器: 要加样式的HTML标记
	b: 格式声明语句: {声明;声明;...;}
	c: 声明: 属性名: 属性值;
	
		eg: <html><head>
				<style type="text/css" >
					h1
					{
						color: #FF0000;		//文本颜色
						text-align: center;  //对齐方式
						border: 1px solid #FF00FF;  //边框样式
						background-color: #FFFF00; //背景色
					}
				</style>
			</head><body></body></html>

CSS选择器
	A: 基本选择器
		a: "*"选择器: 通配符
			将匹配所有的HTML标记,所有的标记都会改变
			语法: *{}
		b: 标签选择器
			将匹配指定的HTML标记
			语法: 标记{}
		c: class选择器(类选择器)
			给一类HTML标记加样式."一类": 每个HTML标记都有一个class属性,class属性值一样的为同一类
			语法: [标记]"." + 类名{}	//若前面加了标记,则特指 class="类名"的指定 标记
				eg: h1.my{} //匹配class="my"的h1标记
		d: id选择器
			给指定id的元素添加样式,每个HTML标记都有一个id属性,网页中id属性的值是唯一的
			语法: #ID值{}
	B: 组合选择器
		a: 多元素选择器
			给多个元素加同一个样式,多个选择器之间用","隔开(可以是标签选择器,class选择器,id选择器)
			eg: h1,p,div,.类名,#ID值,...{}
		b: 后代元素选择器
			给某个标记的某一个后代元素加样式,选择器之间用"空格"隔开
			eg: div .title{} //给div的class="title"的后代元素加样式
				table tr td{} //给table的tr的td加样式
		c: 子元素选择器
			给某个元素的子元素添加样式
			eg: div > h1.title{} //给div的class="title"的h1标记子元素加样式
	C: 伪类选择器: 给超链接加样式
		一个超链接有四个状态: 
			a: link: 正常: 鼠标没放上之前
			b: hover: 鼠标放上: 鼠标放在链接上
			c: active: 点击激活: 按住左键不松开
			d: visited: 访问过: 按下鼠标左键松开后
				eg: a:link,a:visited{color: blue;text-decoration: none;}
					a:hover{color: red;text-decoration: underline;}
CSS属性
	a: 阴影 
		box-shadow: <水平偏移值> <垂直偏移值> <阴影模糊值> <阴影半径> <颜色>;

	A: 布局
		a: float: 元素是否及如何浮动,取值: none(不浮动),left,right
			浮动元素不再占空间,且其层级高于普通元素,浮动元素一定是"块元素"(不管他原来是什么元素).若浮动元素未指定宽度,则其会尽可能的变窄
		b: clear: 不允许有浮动对象的边,取值: none(允许两边都可以有浮动对象),both(不允许有浮动对象),left(不允许左边有浮动对象),right(不允许右边有浮动对象)
			清除浮动之后的其他元素将恢复默认排版	
		c: display: 规则网页元素如何显示,取值: none(隐藏),block(块元素方式显示),inline(行内元素方式显示)
				block: 可以将行内元素转成块元素
				inline: 可以将块元素转成行内元素
		d: overflow: 当对象的内容超过其指定高度及宽度时如何管理内容,
			取值: 	visible(不剪切内容),
					hidden(将超出对象尺寸的内容进行裁剪，将不出现滚动条),
					scroll(将超出对象尺寸的内容进行裁剪，并以滚动条的方式显示超出的内容),
					auto( 在需要时剪切内容并添加滚动条，此为body对象和textarea的默认值)
		e: overflow-x: 当对象的内容超过其指定宽度时如何管理内容,取值: visible,hidden,scroll,auto
		f: overflow-y: 当对象的内容超过其指定高度时如何管理内容,取值: visible,hidden,scroll,auto
		
		有浮动就得有清除
	B: 尺寸
		a: width: 元素宽度,一定要加px单位
		b: height: 元素高度
		c: min-width: 元素最小宽度
		d: max-width: 元素最大宽度	
		e: min-height: 元素最小高度
		f: max-height: 元素最大高度
	C: 外边距
			margin: 设置上下左右四边的外填充
		a: margin-top: 设置对象顶边的外填充
		b: margin-right: 设置对象左边的外填充
		c: margin-left: 设置对象右边的外填充
		d: margin-bottom: 设置对象底边的外填充
	D: 内填充
			padding: 设置上下左右四边的内填充
		a: padding-top: 设置对象顶边的内填充
		b: padding-right: 设置对象左边的内填充
		c: padding-left: 设置对象右边的内填充
		d: padding-bottom: 设置对象底边的内填充
	E: 边框
			border: 复合属性(border-width,border-style,border-color): 设置所有边框的粗细,线型和线的颜色.
.		a: border-width: 所有边框的粗细
		b: border-style: 所有边框的线型
		c: border-color: 所有边框的颜色
		d: border-left: 左边框线.复合属性(border-left-width,border-left-style,border-left-color).格式: border-left: 粗细 线型 线的颜色;
		e: border-right: 有边框线.复合属性.类似
		f: border-top: 上边框线.复合属性.类似
		g: border-bottom: 下边框线.复合属性.类似
		h: border-radius: <1> , <2> , <3> , <4>
			1: border-top-left-radius: 设置左上角边框的圆角样式
			2: border-top-right-radius: 设置右上角边框的圆角样式
			3: border-bottom-left-radius: 设置左下角边框的圆角样式
			4: border-bottom-right-radius: 设置右下角边框的圆角样式


	F: 背景
			background: 复合属性(background-color,background-image,background-repeat,background-attachment,background-position)
		a: background-color: 背景颜色
		b: background-image: 背景图片,格式: background-image: url(路径);
 		c: background-repeat: 背景图片如何铺排填充,
			取值: repeat-x(在横向上平铺),repeat-y(在纵向上平铺),repeat(在横向和纵向平铺),no-repeat(图像不平铺)
				,round(自动缩放直到适应且填充满整个容器),space(以相同的间距平铺且填充满整个容器或某个方向) 
		d: background-attachment: 背景图片是随对象内容滚动还是固定的,取值: fixed(相对于窗体固定),scroll(相对于元素固定),local(相对于元素内容固定)
		e: background-position: 背景图片位置. 格式: background-position: 水平方向定位 垂直方向定位
			取值: left(水平),center,right(水平),top(垂直),bottom(垂直),数值,百分比
		f: background-size: 背景图片的尺寸大小
	G: 字体
			font: 复合属性(font-style,font-variant,font-weight,font-size,line-height,font-family)
		a: font-size: 文字大小.	eg: font-size: 14px; 
		b: font-family: 字体.	eg: font-family: 微软雅黑;
		c: font-style: 斜体.	eg: font-style: italic;
		d: font-weight: 粗体	eg: font-style: bold;
	H: 文本
		a: color: 文本颜色
		b: text-decoration: 文本修饰线,取值: none(无),underline(下划线),overline(上划线),line-throught(删除线)
		c: text-align: 文本水平对齐方式,取值: left,center,right
		d: line-height: 行高	eg: line-height:24px;	line-height:150%;
		e: text-indent: 首行缩进.	eg: text-indent: 28px; text-indent: 2em; //2em: 两个字 
		f: letter-spacing: 字间距.
	I: 列表
			list-style: 复合属性(list-style-image,list-style-position,list-style-type)
		a: list-style-image: 设置元素的列表项标记的图像,默认值 none
		b: list-style-position: 设置元素的列表项标记如何根据文本排列
		c: list-style-type: 设置元素的列表项所使用的预设标记,取值:disc(实心圆),circle(空心圆),square(实心方块),decimal(阿拉伯数字),lower-roman(小写罗马数字),upper-roman(大写罗马),...
	J: 定位
		a: position: 元素的定位方式,取值: static(无特殊定位),relative(相对定位),absolute(绝对定位),fixed(固定定位)
				定位坐标: 指定定位的元素,偏移目标元素多远的距离
				1: fixed: 固定定位,是相对于浏览器窗口来进行的定位.
						  固定定位不占空间,层级高于普通元素,不随网页的滚动而滚动
						  固定定位若不指定位置,则固定定位元素的位置原地不动
						  固定定位元素,一定是块元素,不管原来是什么元素
				2: relative: 相对定位,是相对于"原来的自己"进行定位
						  相对定位依然占空间,层级高于普通元素,随网页的滚动而滚动
						  相对定位若不指定位置,则相对定位元素的位置原地不动
						  相对定位元素,一定是块元素,不管原来是什么元素
				3: absolute: 绝对定位,是相对于祖先定位元素(可以是相对,绝对)进行定位,就近原则
						  若祖先没有定位元素,则绝对定位相对于<body>进行定位
						  绝对定位不占空间,层级高于普通元素,随网页的滚动而滚动
						  绝对定位若不指定位置,则绝对定位元素的位置原地不动
		b: left: 定位元素,距离目标元素左边的距离
		c: top: 定位元素,距离目标元素顶边的距离
		d: right: 定位元素,距离目标元素右边的距离
		e: bottom: 定位元素,距离目标元素底边的距离
		f: z-index: 设置对象的层叠顺序.并级的对象,此属性参数值越大,则被层叠在最上面
	K: 表格
		a: border-collapse: 表格的行和单元格的边是合并还是独立,取值: separate(边框独立),collapse(相邻边被合并)
		b: border-spacing: 当表格边框独立时,行和单元格的边框在横向和纵向上的间距	
	L: 用户界面
		a: cursor: 网页中光标类型,取值: text(文本光标),help(帮助光标),wait(等待光标),pointer(手型光标),...	

CSS继承性
	CSS属性继承: 外层元素的样式,会被内层元素继承.多个外层元素的样式,最终会"叠加"到内层元素
		CSS文本,字体属性都会被继承: font,text,font-family,font-size,...
		<body>中的CSS属性会被所有的子元素继承.
CSS优先级
	单个选择器的优先级: 行内样式(用标记的style属性设置样式) > ID选择器 > 类选择器 > 标签选择器
			eg: <h1 id="title" class="title" style="color: yellow">: 
				(element.style{color: yellow;} > #title{color: green;} > .title{color: red;} > h1{color: black;}) --> (color: yellow)
	多个选择器的优先级: 一般情况下,指向越精确,优先级越高;特殊情况下,假设一些值: 标签选择器: 1 < 类选择器: 10 < ID选择器: 100 < 行内样式: 1000.
			eg: (h1.title: 1+10 = 11) > (.title: 10)
	
浏览器兼容性
	
	一个网页在不同的浏览器下,显示的效果可能不一样,这所谓"不兼容"
	兼容性调试: 主要调试 IE8,IE7,IE6,Firefox,...
	
	A: 全局CSS设置
		a: 清除所有标记的内外边距
			body,div,ol,ul,li,dl,dt,dd,h1,h2,h3,h4,h5,h6,p,form,fieldset,legend,input{ margin:0; padding:0;}/*去内外间距*/
		b: 去除项目符号或编号
			ol,ul,li{list-style:none;}/*去除列表项目符号*/
		c: 全局链接效果
			a:LINK,a:VISITED{color: blue;text-decoration: none;}/*链接点击前,后*/	a:HOVER{color: red;}/*鼠标放在链接上时*/
		d: 网页中所有文字
			body{font-size: 12px;color: #444;}/*文字大小(12px),文字颜色(深黑)*/
		e: 去除图片边框线
			img{border: 0px none;}
		f: 全局的类样式
			.floatL{float: left;}	/*左浮动*/
			.floatR{float: right;}	/*右浮动*/
			.clear{clear: both;}	/*去除浮动*/
			.black10{height: 10px;clear: both;}	/*去除浮动,高为10px的空白块*/
			.blue{color: blue;}		/*颜色*/
	B: 实现所有浏览器主页居中
		a: Filefox: .box{margin: 0px auto;}
		b: IE6: body{text-align: center;}
	C: 单行文本上下居中
		H1{height: 30px;line-height: 30px;}
	
WXSS: 
	flex 布局: 
		flex 容器的属性
				flex-flow: 复合属性(flex-direction,flex-warp): 设置排列方式以及如何换行
			a: flex-direction: 设置容器内子元素即flex-item的排列方向,
					取值: row: 表示该容器中的子元素即flex-item元素 从左到右依次排列
						  column: 表示该容器中的子元素即flex-item元素 从上到下依次排列
			b: flex-wrap: 如果一条轴线排不下,如何换行,
					取值: nowrap: 表示即使一行排不下,也不换行
						  wrap: 表示一行排不下,就换行
						  wrap-reverse: 换行,第一行在下方
			c: justify-content: 项目在主轴上的对齐方式,
					取值: flex-start(左对齐),flex-end(右对齐),center(居中),space-between(两端对齐),space-around(两端相等)
			d: align-items: 项目在交叉轴上如何对齐,
					取值: flex-start(起点对齐),flex-end(终点对齐),center(居中),baseline:(第一行文字基线对齐),stretch(如果项目未设置高度或设为auto,将占满整个容器的高度)
			e: align-content: 多根轴线的对齐方式(如果项目只有一根轴线,该属性不起作用),
					取值: flex-start: 与交叉轴的起点对齐
						  flex-end: 与交叉轴的终点对齐
						  center: 与交叉轴的中点对齐
						  space-between: 与交叉轴两端对齐,轴线之间的间隔平均分布
						  space-around: 每根轴线两侧的间隔都相等.所以,轴线之间的间隔比轴线与边框的间隔大一倍
						  stretch(默认值): 轴线占满整个交叉轴
			
		flex 容器子元素flex-item的属性
				flex: 复合属性(flex-grow,flex-shrink,flex-basis): 放大缩小比例,以及占据的主轴空间
			a: order: 定义项目的排列顺序.数值越小,排列越靠前,默认为0
			b: flex-grow: 项目的放大比例,默认为0,即如果存在剩余空间,也不放大
					如果所有项目的flex-grow属性都为1,则它们将等分剩余空间(如果有的话).如果一个项目的flex-grow属性为2,其他项目都为1,则前者占据的剩余空间将比其他项多一倍
			c: flex-shrink: 项目的缩小比例,默认为1,即如果空间不足,该项目将缩小
					如果所有项目的flex-shrink属性都为1,当空间不足时,都将等比例缩小.如果一个项目的flex-shrink属性为0,其他项目都为1,则空间不足时,前者不缩小
			d: flex-basis: 分配多余空间之前,项目占据的主轴空间
					浏览器根据这个属性,计算主轴是否有多余空间.它的默认值为auto,即项目的本来大小
			e: align-self: 元素flex-item的对齐方式
					align-self属性允许单个项目有与其他项目不一样的对齐方式,可覆盖align-items属性.默认值为auto,表示继承父元素的align-items属性,如果没有父元素,则等同于stretch
					取值: 该属性可取6个值,除了auto,其他都与align-items属性完全一致
	
	选择器的优先级 
		!important (不算做选择器,只是提升权重) — 权重 无穷大   eg:  .title{color: red !important;}
		style (标签内联样式) — 权重 1000 
		#element(id选择器) — 权重 100 
		.element (class选择器) — 权重 10 
		element — 权重 1
				
	