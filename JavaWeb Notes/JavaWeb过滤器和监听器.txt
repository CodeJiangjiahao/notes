过滤源 --> 过滤规则 --> 过滤结果

Session的钝化机制: 
		把服务器中不经常使用的Session对象暂时序列化到系统文件系统或数据库系统中,当被使用时反序列化到内存中,整个过程由服务器自动完成
	Tomcat中两种Session钝化管理器
			Session钝化机制由SessionManager管理
		a: org.apache.catalina.session.StandardManger,钝化后的文件被保存到: Tomcat根目录/work/Catalina/localhost/Web项目名称/SESSION.ser                 
			1: 当Tomcat服务器被关闭或重启时,Tomcat服务器会将内存中的Session对象钝化到服务器文件系统中;
			2: Web应用程序被重新加载时,内存中的Session对象也会被钝化到服务器的文件系统中
		b: org.apache.catalina.session.Persistentmanager
				在钝化的基础上进行了扩张
			1,2: 与a的1,2情况一样
			3: 可以配置主流内存的Session对象数目,将不长使用的Session对象保存到文件系统或数据库,当使用时再重新加载
	默认情况下,Tomcat提供两个钝化驱动类: 
		1: org.apache.catalina.FileStore
		2: org.apache.catalina.JDBCStore
		
过滤器
	定义: 是一个服务器端的组件,他可以截取用户端的请求与响应信息,并对这些信息过滤

	A: 过滤器的生命周期
		a: 实例化 -->  web.xml
		b: 初始化 -->  init()
		c: 过滤   -->  doFilter()
		d: 销毁   -->  destroy()
		
	B: 过滤器在web.xml的配置
		<filter>
			<filetr-name>Filter的名字</filetr-name>
			<filter-class>Filter的类名称(完整名称,包括包名)</filter-class>
			<init-param>  (0对或多对)
				<description>描述信息,可以省略</description>
				<param-name>参数名</param-name>
				<param-value>参数值</param-value>
			</init-param>
		</filter>
		<filter-mapping>
			<filetr-name>Filter的名字</filetr-name>
			<url-pattern>URL</url-pattern>	(当用户请求的URL和指定的URL匹配时将触发过滤器工作. *: 任意匹配器,eg: /* (代表该项目下的任意网页))    /********/
			<dispatcher></dispatcher>	(可以是0对或多对,值为: REQUEST(未设定的默认值)/INCLUDE/FORWARD/ERROR)
		</filter-mapping>
		
	C: @WebFilter
			用于将一个类声明为过滤器,但是无法去定义过滤顺序,该注解将会在部署时被容器处理,容器将根据具体的属性配置将相应的类部署为过滤器
		@WebFilter的常用属性: 
			1: filterName: 指定过滤器的name属性,等价于<filter-name>.类型: String
			2: value: 该属性等价于urlPatterns属性.但两者不应当同时使用.类型: String[]
			3: urlPatterns: 指定一组过滤器URL匹配模式.等价于<url-pattern>标签.类型: String[]
			4: servletNames: 指定过滤器将应用于哪些Servlet.取值是@WebFilter的name属性的取值,或者是web.xml中<servlet-name>的取值.类型: String[]
			5: dispatcherTypes: 指定过滤器的转发模式.具体取值: ASTNC,ERROR,FORWARD.INCLUDE,REQUEST.类型: DispatcherType
			6: initParams: 指定一组过滤器初始化参数,等价于<init-param>标签.类型: WebInitParam[]
			7: asyncSupported: 该过滤器的描述信息,等价于<description>标签.类型: String
			8: dispalyName: 该过滤器的显示名,通常配合工具使用,等价于<dispaly-name>标签.类型: String

		eg: @WebFilter(filetrName="AAA",value{"/index.jsp"},dispatcherTypes={DispatcherType.REQUEST})
			public class AAA implements Filter{...}
		
			
	D: 过滤器的创建
			实现 javax.servlet.Filter 接口,实现 init(),doFilter(),destroy() 方法
		a: init(): 过滤器的初始化方法,Web容器创建过滤器实例后将调用这个方法.这个方法中可以读取web.xml文件中过滤器的参数
		b: doFilter(): 完成实际的过滤操作的方法.过滤器的核心方法.当用户请求访问与过滤器关联的URL时,Web容器将先调用过滤器的doFilter()方法
							FilterChain参数chain可以调用chain.doFilter()方法,将请求传给下一个过滤器(或目标资源),或利用转发/重定向将请求转发到其他资源
		c: destroy(): Web容器在销毁过滤器实例前调用该方法,在这个方法中可以释放过滤器占用的资源.(大多数情况用不到)

	E: 过滤器链
		用户请求 --> 过滤器1 --> 过滤器2 --> ... --> 过滤器n --> Web资源
			服务器会按照web.xml中过滤器定义的先后顺序组装成一条链
		
		
		用户请求 -->  过滤器1Code1      过滤器2Code1        过滤器nCode1
						  │			    ┌┘      │	         ┌┘      │
						  └┐		    │       └┐           │       └┐
					chain.doFilter()  --┘ chain.doFilter() --┘ chain.doFilter() --> Servlet的service()方法
																						│
		响应用户 <--  过滤器1Code2  <-- 过滤器2Code2   <--  过滤器nCode2   <------------┘


	F: 过滤器的分类
			Servlet 2.5: REQUEST/INCLUDE/FORWARD/ERROR
			Servlet 3.0: ASYNC
		a: REQUEST
			用户直接访问页面(重定向)时,Web容器将会调用过滤器	
		b: FORWARD	
			目标资源是通过RequestDispatcher的forward或<jsp:forward>访问时,该过滤器将被调用
		c: INCLUDE
			目标资源是通过RequestDispatcher的include方法或<jsp:include>调用时,过滤器将被调用
		d: ERROR
			目标资源是通过声明式异常处理机制调用时,过滤器将被调用
		e: ASYNC
			支持异步处理
			
	G: 过滤器在实际项目中的应用场景
		1: 对用户请求进行统一认证
		2: 编码转换
		3: 对用户发送的数据进行过滤替换
		4: 转换图片格式
		5: 对响应的内容进行压缩
		......

监听器
	定义: 是指专门用于对其他对象身上发生的事件或者状态改变进行监听和相应处理的对象,当被监听的对象发生变化时,立即采取相应的行动
		  用于监听ServletContext(application),HttpSession(session)和ServletRequest(request)等域对象的创建与销毁事件
		  用于监听域对象的属性发生修改的事件
		  可以在事件发生前,发生后做一些必要的处理
		  
	A: 监听器在web.xml的配置
		<listener>
			<listener-class>监听器类的路径</listener-class>
		</listener>
		
	B: @WebListener
			该注解用于将类声明为监听器,但是无法去定义监听顺序,被@WebListener标注的类必须实现以下至少一个接口: 
				ServletContextListener,ServletContextAttributeListener,ServletRequestListener,ServletRequestAttributeListener,HttpSessionListener,HttpSessionAttributeListener
		属性: 
			value: (可选)该监听器的描述信息.类型: String 
			
	C: 监听器的创建
		a: 实现 javax.servlet.ServletContextListener 接口,实现 contextInitialized(),contextDestroyed() 方法
			1: contextInitialized(): 监听web应用(ServletContext)初始化方法 
			2: contextDestroyed(): 监听web应用(ServletContext)销毁方法
		b: 实现 javax.servlet.http.HttpSessionListener 接口,实现 sessionCreated(),sessionDestroyed() 方法
			1: sessionCreated(): 监听会话创建方法
			2: sessionDestroyed(): 监听会话销毁方法
		c: 实现 javax.servlet.ServletRequestListener 接口,实现 requestInitialized(),requestDestroyed() 方法
			1: requestInitialized(): 监听请求创建方法
			2: requestDestroyed(): 监听请求销毁方法
		d: 实现 javax.servlet.ServletContextAttributeListener 接口,或 javax.servlet.http.HttpSessionAttributeListener 接口,或 javax.servlet.ServletRequestAttributeListener 接口,
				实现 attributeAdded(),attributeRemoved(),attributeReplaced() 方法
			1: attributeAdded(): 监听属性添加方法
			2: attributeReplaced(): 监听属性替换方法
			3: attributeRemoved(): 监听属性移除方法
		f: 创建 JavaBean 并实现 javax.servlet.http.HttpSessionBindingListener 接口,实现 valueBound(),valueUnbound() 方法
				监听在 JavaBean 中实现,不需要在web.xml注册
			1: valueBound(): 监听绑定方法
			2: valueUnbound(): 监听解除绑定方法
		g: 创建 JavaBean 并实现 javax.servlet.http.HttpSessionActivationListener 接口,实现 sessionDidActivate(),sessionWillPassivate() 方法
				监听在 JavaBean 中实现,不需要在web.xml注册
				想要能够实现活化操作,还需要实现 java.io.Serializable 接口
			1: sessionWillPassivate(): 监听钝化方法
			2: sessionDidActivate(): 监听活化方法
			
	D: 监听器的启动顺序
		a: 一个web.xml下的多个监听器: 按照在web.xml注册顺序启动
		b: 监听器与过滤器,Servlet加载顺序: 优先级: 监听器 > 过滤器 > Servlet
	
	E: 监听器的分类 
		a: 按监听的对象划分
			1: 用于监听应用程序环境对象(ServletContext)的事件监听器
			2: 用于监听用户会话对象(HttpSession)的事件监听器
			3: 用于监听请求消息对象(ServletRequest)的事件监听器
		b: 按监听的事件划分
			1: 监听域对象自身的创建和销毁的事件监听器
				ServletContextListener -> ServletContext, 主要用途: 定时器,全局属性对象
				HttpSessionListener -> HttpSession,	主要用途: 统计在线人数,记录访问日志
				ServletRequestListener -> ServletRequest, 主要用途: 读取参数,记录访问历史
			2: 监听域对象中的属性的增加和删除的事件监听器
				ServletContextAttributeListener -> ServletContext, 
				HttpSessionAttributeListener -> HttpSession,	 
				ServletRequestAttributeListener -> ServletRequest, 
			3: 监听绑定到HttpSession域中的某个对象的状态的事件监听器
					HttpSession中的对象的状态
						绑定 -> 解除绑定,
						钝化 -> 活化
				HttpSessionBindingListener(不需要在web.xml注册) -> 绑定/解除绑定,
				HttpSessionActivationListener(不需要在web.xml注册) -> 钝化/活化		
					
	F: Web监听器的用途
		1: 统计在线人数和在线用户
		2: 系统启动时加载初始化信息
		3: 统计网站访问量
		4: 跟Spring结合
		......
		
		
		
		

































