Spring Boot 使 编码,配置,部署,监控 变简单



//Idea 修改(错误: 找不到 Bean) Severity 等级为 Warning
File -> Settings -> Editor -> Inspections -> Spring -> Spring Core -> Code -> Autowiring for Bean Class -> 修改 Severity 为 Warning

//找不到 com.mysql.cj.jdbc.Driver 时,注意检查 pom.xml 配置的 <scope>runtime</scope>, 该处删掉即可

//System.getProperty("user.dir"): 获取项目路径

/* 解决 Ajax 不能跨域请求(CORS 头缺少 'Access-Control-Allow-Origin'): 
	1: 在 Controller 类上加上 @CrossOrigin(origins = {"*"},allowCredentials = "true") 注解
	2: 在 Ajax 请求体中添加  xhrFields: {withCredentials: true}
		eg: $.ajax({
				type: "POST",
				contentType: "application/x-www-form-urlencoded",
				url: "http://localhost:8888/miaosha/user/register",
				data: { "telphone": "11"},
				xhrFields: { withCredentials: true },
				success: function(data) { alert("success")},
				error: function(data) { alert("error"); }
			});
*/


一一一: 集成 Thymeleaf
	导入 Thymeleaf
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency>
	导入 Thymeleaf Layout
		<dependency>
            <groupId>nz.net.ultraq.thymeleaf</groupId>
            <artifactId>thymeleaf-layout-dialect</artifactId>
        </dependency>

二二二: SpringBoot + MyBatis		//参考文档 (https://blog.csdn.net/winter_chen001/article/details/77249029)
	1: 创建 SpringBoot 项目, 添加 Web, MySQL, JDBC, MyBatis 依赖(开启热部署)
		//mysql 的配置需要删除 runtime 的作用域
	2: pom.xml 添加 连接池 依赖
		//c3p0 连接池
		<dependency>
            <groupId>com.mchange</groupId>
            <artifactId>mchange-commons-java</artifactId>
            <version>0.2.11</version>
        </dependency>
		<dependency>
			<groupId>com.mchange</groupId>
			<artifactId>c3p0</artifactId>
			<version>0.9.5.2</version>
		</dependency>
		
	3: 配置 application.properties 或 application.yml	//配置数据源,扫描 XxxMapper.xml,别名
			注: XxxMapper.xml 需放在 resources 下 ( eg: resources/mapper/UserMapper.xml )
		eg: server: 
				port: 8888	//设置端口号
				servlet: 
					context-path: /SpringbootMybatisDemo	//设置访问url需添加前缀: 项目名(SpringbootMybatisDemo)
			spring:
				datasource:  //配置数据源
					type: 	//使用连接池的数据源
					url: jdbc:mysql://localhost:3306/springboot-demo?serverTimezone=GMT%2B8
					username: root
					password: lemting
					driver-class-name: com.mysql.cj.jdbc.Driver
			mybatis:
				mapper-locations: classpath:mapper/*.xml  //(##*/##)//扫描 XxxMapper.xml //一定要对应mapper映射xml文件的所在路径
				type-aliases-package: com.lemting.springbootmybatisdemo.domain  	//对应实体类的路径
	4: SpringBoot 启动类,添加 @MapperScan //扫描 mapper 类
		@SpringBootApplication
		@MapperScan("com.lemting.mapper")  //将项目中对应的 mapper 类的路径加进来就可以了
		public class SpringbootMybatisDemoApplication {
			SpringApplication.run(SpringbootMybatisDemoApplication.class, args);
		}
	5: 生成对应的 pojo 和 mapper  //MyBatis 逆向工程 
	6: 编写 Serivce, Controller		//通过 @Service,@Controller,@RestController,@RequestMapping 等注解 进行注册
	

三三三: SpringBoot + JSP		//参考文档 (https://blog.csdn.net/hp_yangpeng/article/details/80521866)
		 //webapp 下的目录为可直接访问目录(静态资源)   eg: localhost:8080/index.html (实际访问: webapp/index.html)
	1: 创建 SpringBoot 项目, 添加 Web 依赖(开启热部署)
	2: pom.xml 添加 JSP 依赖
		//Tomcat
		<dependency>
            <groupId>org.apache.tomcat.embed</groupId>
            <artifactId>tomcat-embed-jasper</artifactId>
            <!-- <scope>provided</scope> --> //注意, 这个scope需要被注释掉
        </dependency>
        //JSP 标签库
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>jstl</artifactId>
        </dependency>
        <dependency>
            <groupId>javax.servlet.jsp</groupId>
            <artifactId>javax.servlet.jsp-api</artifactId>
			<version>2.3.3</version>
        </dependency>
		
	3: 创建 webapp\WEB-INF\jsp  //webapp 与 java,resources 为同级目录
	4: 设置 web.xml
		File -> Project Structure -> Modules -> Web (没有就新建一个)
			-> 添加 web.xml	(webapp\WEB-INF\web.xml)(Deployment Descriptors)
			-> 设置 webapp 为 Web Resource Directories 
	5: 在 application.properties(或 yml) 中添加 JSP 的前缀和后缀
		spring.mvc.view.prefix=/WEB-INF/jsp/	//页面默认前缀目录
		spring.mvc.view.suffix=.jsp				//页面默认后缀目录
	
四四四: 打包成 jar   //webapp并不会一起打包.如果需要, 则需在pom.xml配置 <resources> 插件
	1: 配置 pom.xml    
		<groupId>xxx</groupId>
		<artifactId>xxxx</artifactId>
		<version>xxxx</version>
		<packaging>jar</packaging>	//打包方式: jar
		
		<build>
        <plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<configuration>
					<fork>true</fork>
				</configuration>
			</plugin>
			</plugins>
			/**   
				<resources>
					<resource>
						<directory>src/main/webapp</directory>   //webapp的路径
						<targetPath>META-INF/resources</targetPath>  //
						<includes>
							<include> **/** </include> 
						</includes>
					</resource>
				</resources>
			*/
		</build>
	2: 运行 maven 打包
	
	
	
一: 获取 SpringBoot 项目
	A: 网址: (start.spring.io)
		a: 添加基本依赖包(dependencies): Web, DevTools(开发环境工具包: spring-boot-devtools)
		b: 使用 IDEA 导入项目
	B: IEDA 
		a: 通过 File -> New -> Project -> Spring Initializr (使用默认url: start.spring.io)
		b: 添加基本依赖包
		
二: SpringBoot 
	A: 开启 热部署(配置 pom.xml)
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId> //DevTools
			<!--<scope>runtime</scope>-->	//删除该项
			<optional>true</optional>	//添加该项
		</dependency>
		<build>		
			<plugins>
				<plugin>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-maven-plugin</artifactId>
					<configuration>
						<fork>true</fork>	//添加该项	(自动reload)
					</configuration>
				</plugin> </plugins> </build>
		/* 若使用 IEDA , 使用快捷键 Ctrl + Shift + A 
			1. 开启IDEA的自动编译(动态)
				搜索 Registry , 修改 compiler.automake.allow.when.app.running 值为 True(打上勾)  -> 自动编译
								修改 compile.document.save.trigger.delay	-> 自动更新文件
								修改 compile.automake.trigger.delay  		-> 自动更新静态文件
			2. 开启IDEA的自动编译(静态)
				搜索 Build Project automatically, 勾选 Make Project automatically 
			3. 开启IDEA的热部署策略(非常重要)
				搜索 Edit Configurations -> 选中 SpringBoot 项目 -> Configuration -> 
								修改 Running Application Update Policies 下的 (On 'Update' action 和 On Frame deactivation) 为 Update resource
			4. 关闭浏览器缓存(重要)
				打开谷歌浏览器 -> 打开 F12 的 Network 选项栏 -> 然后勾选 Disable cache 
				*/
	B: 项目结构
		a: src/main/java		主程序,项目代码
		b: src/main/resources	配置文件
		c: src/test/java		测试程序
		d: pom.xml				maven 配置文件
		
		project
			-src
				-main
					-java
						-com.xx.projectName
							-domain		//bean
							-mapper		//存放 XxxMapper.java
							-service	
							-web		//controller
							-XxxApplication.java	//SpringBoot启动类
					-resources
						-mapper	 //存放 XxxMapper.xml
						-static
						-templates
						-application.properties	 //配置文件(代替Spring,SpringMVC,..的xml配置等等s)
					-webapp	 //web根目录
						-xxx	//其他静态资源,可直接访问  eg: localhost:8080/index.html (实际访问: webapp/index.html)
						-WEB-INF
							-web.xml
				-test
			-pom.xml
	C: 常用注解
		a: @CrossOrigin
			注解在类上(注解在Controller上), 允许 Ajax 跨域请求
			eg: @Controller 
				@CrossOrigin(origins = {"*"},allowCredentials = "true")
				public AA {...}
		b: @ComponentScan 
			自动扫描项目中包含的所有组件
		c: @Enable*		//启用xx功能
			1: @EnableConfigurationProperties: 启用可以把配置文件的属性注入到bean中,常与 @ConfigurationProperties 一起使用
			2: @EnableAsync: 启用异步, 常与 @Async 一起使用
			
				
	D: 测试类
		@RunWith(SpringRunner.class)
		@SpringBootTest
		public class HelloControllerTest {	//测试 HelloController 类
			private MockMvc mvc;

			@Before
			public void  setUp() throws Exception {
				mvc = MockMvcBuilders.standaloneSetup((new HelloController())).build(); 
			}

			@Test
			public void testHello() throws Exception {
				mvc.perform(MockMvcRequestBuilders.get("/hello?name=it you know"));
			}
		}

三: SpringBoot 拦截器
	A: 创建拦截器配置类 
		a: 实现 WebMvcConfigurer 接口, 添加 @Configuration 注解
		b: 实现 addResourceHandlers(), addInterceptors() 方法
			1: addResourceHandlers(): 用来配置静态资源的,比如 html,js,css 等等
			2: addInterceptors(): 用来注册拦截器, 写好的拦截器需要通过这里添加注册才能生效
		
		eg: @Configuration
			public class WebConfigurer implements WebMvcConfigurer {
				// 这个方法是用来配置静态资源的, 比如html, js, css, 等等
				public void addResourceHandlers(ResourceHandlerRegistry registry) {}
				// 这个方法用来注册拦截器, 我们自己写好的拦截器需要通过这里添加注册才能生效
				public void addInterceptors(InterceptorRegistry registry) { }
			}
			
	B: 创建拦截器
		a: 实现 HandlerInterceptor 接口, 添加 @Component 注解
		b: 实现 preHandle(), afterCompletion(), postHandle(), afterCompletion() 方法
			1: preHandle():在请求被处理之前调用, 可用于判断是否执行拦截器. 返回值 是否放行(boolean)
			2: postHandle(): 在请求被处理后, 视图渲染之前调用
			3: afterCompletion(): 在整个请求结束后调用
			
			eg: @Component
				public class LoginInterceptor implements HandlerInterceptor {
					public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {return false;}
					public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {}
					public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {}
				}

	C: 在 拦截器配置类 中添加拦截器
		a: 注入拦截器 (@Autowired)
		b: 在 addInterceptors() 方法中添加拦截器, 添加拦截路径, 添加白名单路径
			//registry 为 InterceptorRegistry 类对象
			//addPathPatterns(): 设置拦截路径, 可填入多个参数
			//excludePathPatterns(): 设置白名单路径, 可填入多个参数
			1: registry.addInterceptor(拦截器对象).addPathPatterns("").excludePathPatterns("","",""); 
			
			eg: //拦截器配置类 
				public void addInterceptors(InterceptorRegistry registry) {
					registry.addInterceptor(loginInterceptor).addPathPatterns("/").excludePathPatterns("/login","/register","/logout");
				}
	
四: application.properties		//参考文档(https://blog.csdn.net/je_ge/article/details/54783184)
		/* 获取 application.properties 里的变量	//在变量定义时加上 @Value 
			@Value("${变量名}")
			private String 变量;   */
	a: Spring Config
		1: spring.config.name   	//配置文件名称,默认为 application 
		2: spring.config.location 	//配置文件存放位置,默认为 classpath 目录下
		3: spring.profiles.active	//根据设置值导入配置文件: application-{spring.profiles.active}.yml 或 application-{spring.profiles.active}.properties
		4: spring.resources			//设置资源目录
	b: Spring MVC (WebMvcProperties)
		1: spring.mvc.view.prefix 	//指定mvc视图的前缀. 
		2: spring.mvc.view.suffix	//指定mvc视图的后缀. (实际视图名 = prefix + 视图名 + suffix)
		3: spring.mvc.async.request-timeout    	//设定async请求的超时时间(ms),如果没有设置的话,以具体实现的超时时间为准
		4: spring.mvc.date-format 				//设定日期的格式, 比如dd/MM/yyyy. 
		5: spring.mvc.favicon.enabled 				//是否支持favicon.ico, 默认为: true 
		6: spring.mvc.ignore-default-model-on-redirect //在重定向时是否忽略默认model的内容,默认为true
		7: spring.mvc.locale 							//指定使用的Locale. 
		8: spring.mvc.message-codes-resolver-format 	//指定message codes的格式化策略(PREFIX_ERROR_CODE,POSTFIX_ERROR_CODE). 
	c: Server	
		1: server.port					//服务器端口号
		2: server.servlet.context-path	//访问路径前缀
	d: MyBatis		
		1: mybatis.config-location		//mybatis 核心配置文件所在路径
		2: mybatis.type-aliases-package //mybatis 别名扫描包
		3: mybatis.mapper-locations		//所有的mapper映射文件
	e: DataSource (数据源)
		1: spring.datasource.type		//连接池数据源	eg: com.mchange.v2.c3p0.DriverManagerDataSource
		2: spring.datasource.driver-class-name = com.mysql.jdbc.Driver	//数据库驱动类
		3: spring.datasource.url		
		4: spring.datasource.username
		5: spring.datasource.password
		6: spring.datasource.data	
	f: Http
		1: spring.hateoas.apply-to-primary-object-mapper   	//设定是否对object mapper也支持HATEOAS,默认为: true 
		2: spring.http.converters.preferred-json-mapper 	//是否优先使用JSON mapper来转换. 
		3: spring.http.encoding.charset 	//指定http请求和相应的Charset,默认: UTF-8 
		4: spring.http.encoding.enabled 	//是否开启http的编码支持,默认为true 
		5: spring.http.encoding.force  		//是否强制对http请求和响应进行编码,默认为true
	g: logging
		1: logging.path=/var/logs 		//日志文件路径
		2: logging.file=myapp.log 		//日志文件名
		3: logging.config= # location of config file (default classpath:logback.xml for logback) 
		4: logging.level.*= # levels for loggers, e.g. “logging.level.org.springframework=DEBUG” (TRACE, DEBUG, INFO, WARN, ERROR, FATAL, OFF)	
	h: devtools
		1: spring.devtools.livereload.port		//服务器端口
		2: spring.devtools.restart.enabled		//是否启用自动重启
	i: Thymeleaf
		1: spring.thymeleaf.prefix		//Thymeleaf 模板文件前缀, eg: classpath:/templates/
		2: spring.thymeleaf.suffix		//Thymeleaf 模板文件后缀, eg: .html
		3: spring.thymeleaf.mode		//模式, eg: HTML
		4: spring.thymeleaf.encoding	//编码, eg: UTF-8
		5: spring.thymeleaf.cache		//缓存, eg: false
	j: Tomcat
		1: server.tomcat.accesslog.prefix	//前缀
		2: server.tomcat.uri-encoding		//URI 编码, eg: utf-8
	
	
	
eg:
server:
  port: 8888    #设置端口号
  servlet:
    context-path: /wisdomhotel	#设置访问url需添加前缀: 项目名(WisdomHotel)
  tomcat:
    accesslog:
      prefix: /
    uri-encoding: utf-8
spring:
  profiles:
    active: dev    #开发环境: dev, 上线环境: prod
  servlet:
    multipart:
      max-request-size: 10MB # 上传文件总的最大值
      max-file-size: 10MB    # 单个文件的最大值
  thymeleaf:
    prefix: classpath:/templates/
    mode: HTML
    encoding: UTF-8
    cache: false
  datasource:  #配置数据源
    url: jdbc:mysql://127.0.0.1:3306/wisdom_hotel?serverTimezone=GMT%2B8
	username: root
	password: lemting
	driver-class-name: com.mysql.cj.jdbc.Driver

mybatis:
  mapper-locations: file:${mpath.project-path}/resources/mapper/*.xml  #扫描 XxxMapper.xml 一定要对应mapper映射xml文件的所在路径
  type-aliases-package: com.lemting.wisdomhotel.domain  	#对应实体类的路径	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	