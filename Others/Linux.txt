
//通配符
a: 一般通配符
	1: *  				匹配任意字符任意次
	2: ?				匹配任意一个字符
	3: [ ]				匹配该字符组限定的任意一个字符		eg: f[ab]  =>  fa,fb 
	4: [! ]				匹配不是该字符组列出的字符			eg: f[!1-9] 
b: 模式表达式  //模式之间 '|' 隔开
	1: *(<pattern>..)		匹配给定的模式中出现任意次的"模式"		eg: file*(.c|.o)  =>  file,file.c,file.c.o 等
	2: +(<pattern>..)		一次以上
	3: ?(<pattern>..)		0次或一次
	4: @(<pattern>..)		一次
	5: !(<pattern>..)		0次
	
	
//&	 		加在一个命令的最后, 可以把这个命令放在后台执行
//nohup	 	不挂断的运行命令

	
一: Linux 常用命令
		//命令格式:  $ command [-options] [arguments]
	A: 简单命令
		a: who 								//列出系统用户, 终端名, 注册到系统的时间
			1: whoami							列出当前用户..
		b: echo								//打印命令行中的参数
		c: date								//打印系统日期时间
		d: cal								//打印 1~9999 年中的任意一年或月的日历
			1: cal <year>						打印年
			2: cal <month> <year>				打印月
		e: clear							//清屏
		f: passwd							//修改用户密码
	
	B: 文件操作命令	
		a: cat [-opt] <file>..				//连接文件并打印
			1: -s								将多个相邻的空行合并成一个
		b: more [-opt] <file>				//显示文件内容, 每次显示一屏
			1: -<num>							指定一屏显示 num 行
		c: less [-opt] <file>				//显示文件内容
		d: head [-opt] <file>				//显示文件开头内容
			1: -c <N>							显示文件前 N 个字节
			2: -n <N>							显示文件前 N 行
		e: tail [-opt] <file>				//显示文件末尾内容
			1: -c <N>							显示文件后 N 个字节
			2: -n <N>							显示文件后 N 行
		f: touch [-opt] <file>..			//修改文件时间, 文件不存在则创建新文件
		
	C: 排序去重
		a: sort [-opt] <file>				//对文件所有行排序, 并显示
		b: uniq [-opt] <file>[<out>]		//读取 file, 比较相邻的行, 去重复 [将结果写到 out 文件中] 
	
	D: 比较文件
		a: comm [-123] <file1> <file2>		//对两个已排序文件逐行比较
			1: -123 						1,2,3 分别代表 不显示 comm 输出中的第一列,第二列,第三列 
		b: diff [-opt] <file1> <file2>		//逐行比较两个文件, 列出不同, 并显示如何修改变成相同
	
	E: 复制,删除,移动文件或目录
		a: cp [-opt] <source> <target>		//将 源文件或目录 复制到 目标文件或目录
			1: -r								递归复制目录
			2: -f								不给予提示
			3: -i								给予提示
		b: rm [-opt] <file>|<dir> ..		//删除文件或目录
			1: -r								递归删除目录
			2: -f								不给予提示
			3: -i								给予提示
		c: mv [-opt] <source> <target>		//重命名或移动 文件或目录
			1: -f								不给予提示
			2: -i								给予提示
		
	F: 文件内容统计
		a: wc [-lcw] <file>..				//统计并打印文件的 字节数,字数,换行符数
			1: -lcw								l,c,w 分别代表 统计 换行符数,字节数,字数
	
	G: 目录
		a: mkdir [-opt] <dir>				//创建目录
			1: -p								一次创建多级目录
		b: rmdir [-opt] <dir>				//删除目录
			1: -p								递归删除目录
		c: cd [<dir>]						//改变工作目录
		d: pwd [<dir>]						//显示目录绝对路径
		e: ls [-opt] [<file>|<dir>]			//显示目录子目录与文件的信息, 显示文件的相关信息
			1: -a								显示所有文件, 包括隐藏文件
			2: -l 								长格式输出
	
	H: 权限
		a: chmod <key> <file>				//改变文件或目录的权限
				key: [who] [操作符] [mode]
			1: who								取值(可任意组合): u(用户), g(同组用户), o(其他用户), a(所有用户)
			2: 操作符							取值: +(添加指定权限), -(取消指定权限), =(设置为指定权限)
			3: mode								取值(可任意组合): r(可读), w(可写), x(可执行)
		b: umask <mode>..					//设置新建文件权限的掩码
	
	I: 进程管理
			> ps -ef|grep java  //显示所有java进程
		a: ps [-opt]						//查看进程
			1: -a								显示与 tty 相关的所有进程
			2: -e								显示所有进程
			3: -f								显示进程所有信息
			4: -l								长格式输出
			5: -u								显示 CPU,内存 使用情况等
		b: kill [-opt] <PID>				//终止进程
			1: -s <TERM>						发送信号 TREM
		c: sleep <sec>						//当前进程暂停 sec 秒
			
	J: 压缩解压缩
		a: gzip [-opt] <file>..				//对文件压缩,解压缩
			1: -c								打印输出, 并保留源文件
			2: -d								将被压缩的文件解压缩
			3: -l								列出 压缩文件大小,未压缩文件大小,压缩比,未压缩文件名字
			4: -r								递归压缩或解压缩子文件
		b: unzip [-opt] <file>				//解压缩
			1: -t								检查压缩文件的完整性
			2: -d <dir>							将压缩文件解压后放到指定目录
			3: -n								不覆盖已存在的文件
			4: -o								覆盖已存在的文件

二: VI
		//$ vi <file>..				//使用 vi 打开文件, 若文件不存在则创建
	A: 退出 VI (command mode)
		1: :wq							保存并退出
		2: :ZZ							仅当修改过内容时, 才将缓冲区内容写到文件上
		3: :x							与 :ZZ 相同
		4: :q!							强制退出 
		5: :q							退出

	B: 光标移动 
		a: command mode
			1: [<n>] + {l|space|→}				向右移 n 个字符
			2: [<n>] + {h|backspace|←}			向左移 n 个字符
			3: [<n>] + {k|-|ctrl+p|↑}			向上移 n 行 (-: 移至行首)
			4: [<n>] + {j|+|enter|ctrl+n|↓}		向下移 n 行 (+|enter: 移至行首)
			5: 0						移至当前行行首
			6: ^						移至当前行行首第一个非空白字符
			7: [<n>] + $				移至下面 n-1 行行尾
			8: [行号] + G				移至指定行行首 (默认最后一行)
			9: [列号] + |				移至指定列
			10: w|W						移至下一单词开头
			11: b|B						移至上一单词开头
			12: e|E						移至词尾
			13: ( , )					移至上一句子开头,下一句子开头	
		b: input mode
			1: ←↑↓→						方向上移动一格
			2: backspace				退格
		
	C: 文本输入,修改 
		a: 插入命令  (command mode  ==>  input mode)
			1: i						在光标前插入文本
			2: a						在光标后插入文本
			3: I						在当前行首插入文本
			4: A						在当前行尾插入文本
			5: o						在当前行下开辟一行 插入文本
			6: O						在当前行上开辟一行 插入文本

		b: 文本修改 (command mode)
			1: [<n>] + x				删除当前光标开始的 n 个字符
			2: [<n>] + X				删除前一光标开始的 n 个字符 //向左删除
			3: [<n>] + dd				删除 n 行
			4: D						从光标开始删除到行尾
			5: u						撤销刚才的插入或删除
			6: U						将当前行恢复到编辑前状态
			7: .						重复最近一次的插入或删除命令
			8: [<n>] + r				用随后输入的字符替换从光标开始的 n 个字符 			
			9: [<n>] + R				用随后输入的文本替换从光标开始的 n 个字符 
			10: [<n>] + J				将当前行与下面 n-1 行合并成一行 (默认合并两行)	
	
	D: 字符串查找 (command mode)
		a: /<pattern> 					向后查找指定模式的文本 				
		b: ?<pattern>					向前查找指定模式的文本
		c: n							重复上一次查找
		d: N							重复与上一次相反的查找 (/ -> ?, ? -> /)
		
三: shell 程序设计
	A: 执行 shell 脚本
		a: $ bash < <shell>				//读取命令行,并执行 (不是直接执行脚本)		eg: $ bash < ex1			
		b: $ bash <shell> [args] 		//执行脚本,可以附带参数列表
		c: $ .<shell> [args]			//在当前 shell 中执行另一个 shell
		d: $ <shell>					//只有在 shell 脚本有可执行权限时
		
	B: 命令历史
		a: history [-opt] [args]		//显示历史命令
			1: -w							把当前的历史写到历史文件中, 覆盖原有内容
			2: -c							删除历史记录
		b: 执行历史命令
			1: !!							重复上一条历史命令 (!! == !-1)
			2: !<n>							重复第 n 条历史命令			
			3: !<-n>						重复倒数第 n 条历史命令	
			4: !<str>						重复以 str 开头的最近的历史命令
			5: !?<str>?						重复包含 str 的最近的历史命令
			6: !#							到现在为止所输入的所有历史命令
	
	C: 别名
		a: alias [name=[value]]..		//定义别名	eg: alias cdd='cd ~/Desktop/'
			1: alias							显示别名清单
		b: unalias <name>..				//取消别名
	
	D: 注释
		a: #							//注释以 # 开头
		b: #!							//若 shell 文件的第一行以 #! 开头, 注明使用 shell 的绝对路径
			1: C shell:	 					#! /bin/csh
			2: bash shell:					#! /bin/bash
	
	E: 成组命令
		a: {}							//{} 括起来的全部命令视为一条命令
		b: ()							//() 与 {} 类似, 但是 () 会在新的子 shell 内执行
	
	F: shell 变量
		a: 变量名
			1: 以字母或下划线开头, 由字母,数字,下划线组成
			2: 区分大小写
		b: 变量赋值
			1: <name>=<value>
			2: <name>=`命令表`				//将命令表的执行结果赋值给变量
			3: <name>=$(命令表)				//将命令表的执行结果赋值给变量
		c: 引用变量值
			1: $name					eg: $ dir=/bin;echo $dir;
			2: ${name}
			3: ${name[index]}				数组元素
			4: ${name[*]},${name[@]}		数组所有非空元素
		
	G: 数组 	//bash 只提供一维数组
		a: 声明数组
			1: <name>[<index>]=<value>		//直接赋值,能生成该数组
			2: declare -a <name>			//通过函数定义数组
		b: 读取数组元素
			${<name>[<index>]}		
		c: 赋值
			1: <name>[<index>]=<value>  		//单个赋值
			2: <name>=(<value1> <value2>..)		//组合赋值,值之间空格隔开
		d: 取消定义
			1: unset <name>[<index>]			//取消数组中指定索引元素的定义
			2: unset <name>						//取消数组定义
	
	H: 输入/输出
		a: read <var>..						//从键盘读取数据,并赋值给变量
		b: echo 
	
	I: 流程控制
		//选择结构
		a: if 
			if <exp1>		// ==> if() 
			then <code1>	// ==> {}
			elif <exp2>		// ==> else if()
			then <code2>	// ==> {}
				...		
			else <code3>	// ==> else {}
			fi				// ==> end if
		b: case 
			case <str> in
			<model1>): <code1> ;;
			<model2>): <code2> ;;
			...
			esac
					eg: read a
						case $a in 
						1) echo "input 1";;
						2) echo "input 2";;
						3|4) echo "input $a";;
						*) echo "error input";;
						esac
		//循环结构
		/* break [n], continue [n]	//退出n重循环, 跳过n重的循环  */
		a: while
			while <exp> do <code> done
		b: until
			until <exp> do <code> done
		c: for 
			1: for <var> [ in 值表 ]; do <code> done	//类似增强 for 循环
			2: for(( ; ; )) do <code> done				//类似普通 for 循环
			
	J: 条件测试 test
			/* (): 优先级最高,需要转义  eg: [ \("$a" -ge 0\) -a \("$b" -le 100\) ]  */
		a: 格式
			1: test <options> <args>
			2: [ <options> <args> ]
			3: [[ <options> <args> ]]
		b: 文件测试
			1: -r, -w, -x	//可读,可写,可执行		eg: [ -r "$1" ]  //若为可读文件, 则返回 true
			2: -f, -d		//文件, 目录			eg: [ -d "$1" ]	 //若为文件夹, 则返回 true
			3: -s			//长度大于0				eg: [ -s "$1" ]  //若文件长度大于0, 则返回 true
		c: 字符串测试
			1: -z <str>		//字符串长度是否为 0
			2: -n <str>		//字符串长度是否大于 0
			3: <str>		//字符串是否不是空串
			4: =  !=  <  >	//字符串比较	eg: [ s1 < s2 ]
		d: 数值测试
			1: -eq, -ne, -lt, -le, -gt, -ge		//相等,不等,小于,小等,大于,大等	eg: [ n1 -le n2 ]
		e: 逻辑运算
			1: -a, -o, !	且,或,非
			
	K: 函数
		[function] <name>() { [return [n]] }
		a: 函数定义不需要参数, 调用时直接传参, 可以通过位置参数直接获取
		b: 可以使用函数外部变量
		c: 函数调用不需要加括号
	
	
/* 
	Hadoop
1: 单击配置(非分布式) 实例
	cd /xxx/hadoop			
	mkdir ./input						
	cp ./etc/hadoop/*.xml ./input		#复制数据文件到 input 目录
	./bin/hadoop jar ./share/hadoop/mapreduce/hadoop-mapreduce-examples-*.jar grep ./input ./output 'dfs[a-z.]+'
	cat ./output/*						#查看输出结果

	rm -r ./output

2: 伪分布式配置
	编辑 core-site.xml
		gedit ./etc/hadoop/core-site.xml
			配置文件内容: ...
			<configuration>
				<property>
					<name>hadoop.tmp.dir</name>
					<value>file:/usr/cpy/hadoop/tmp</value>
					<description>Abase for other temporary directories.</description>
				</property>
				<property>
					<name>fs.defaultFS</name>
					<value>hdfs://localhost:9000</value>
				</property>
			</configuration>
	编辑 hdfs-site.xml
		gedit ./etc/hadoop/hdfs-site.xml
			配置文件内容: ....
			
			
	执行 NameNode 初始化
		cd /xxx/hadoop
		./bin/hdfs namenode -format
	开启 NameNode 和 DataNode 守护进程
		./sbin/start-dfs.sh
	判断是否启动成功, 若成功会列出进程 NameNode DataNode SecondaryNameNode(若未启动, 通过 stop-dfs.sh 关闭进程后, 重新尝试启动) 
		cd /xxx/hadoop
		jps
	关闭 Hadoop 
		./sbin/stop-dfs.sh
	再次启动 Hadoop, 无需进行 NameNode 初始化
		./sbin/start-dfs.sh
	
3: 伪分布式配置 实例
	cd /xxx/hadoop
	./bin/hdfs dfs -mkdir -p /user/hadoop		#在 HDFS 中创建用户目录
	./bin/hdfs dfs -mkdir input
	./bin/hdfs dfs -put ./etc/hadoop/*.xml input 	#复制数据文件到用户目录的 input 目录
	./bin/hdfs dfs -ls input 						#查看 input 目录文件列表
	./bin/hadoop jar ./share/hadoop/mapreduce/hadoop-mapreduce-examples-*.jar grep ./input ./output 'dfs[a-z.]+'
	./bin/hdfs dfs -cat output/*					#查看输出结果	
	
	./bin/hdfs dfs -rm -r output					#删除 output 目录
	
	
	#运行程序时, 输出目录不能存在, 可在代码中加入如下代码, 每次运行自动删除输出目录
	Configuration configuration = new Configuration();
	Job job = new Job(configuration);
	Path outputPath = new Path(args[1]);
	outputPath.getFileSystem(configuration).delete(outputPath, true);
	

*/
	
	
	
	
	
	
	
	
	
	