//[]: 所括起来的为要填写

GitBash: 
	A: 新建,克隆库
		a: $ git init						//将当前目录初始化为Git代码库
		b: $ git init [project-name] 		//新建一个目录,将其初始化为Git代码库
		c: $ git clone [url]				//下载一个项目和它的整个代码历史
	B: 配置
			Git的设置文件为.gitconfig,它可以在用户主目录下(全局配置),也可以在项目目录下(项目配置)
		a: $ git config --list 				//显示当前的Git配置
		b: $ git config -e --global			//编辑Git配置文件
		c: $ git config --global user.name "[name]"		//设置用户名
		d: $ git config --global user.email "[email address]"	//设置邮箱
	C: 增加/删除文件
		a: $ git add [file1] [file2] ...	//添加指定文件到暂存区
		b: $ git add [dir]					//添加指定目录到暂存区,包括子目录
		c: $ git add .						//添加当前目录的所有文件到暂存区
		d: $ git add -p						//添加每个变化前,都会要求确认.对于同一个文件的多处变化,可以实现分次提交
		e: $ git rm [file1] [file2] ...		//删除工作区文件,并且将这次删除放入暂存区
		f: $ git rm --cached [file]			//停止追踪指定文件,但该文件会保留在工作区
		g: $ git mv [file-original] [file-renamed]	//改名文件名,并且将这个改名放入暂存区
	D: 代码提交
		a: $ git commit -m [message]		//提交暂存区到仓库区.message: 提交的信息 
		b: $ git commit [file1] [file] ... 	//提交暂存区的指定文件到仓库区
		c: $ git commit -a 					//提交工作区自上次commit之后的变化,直接到仓库区
		d: $ git commit -v					//提交时显示所有diff信息
		e: $ git commit --amend -m [message] //使用一次新的commit,替代上一次提交.如果代码没有任何新变化,则用来改写上一次commit的提交信息
		f: $ git commit --amend [file1] [file2] ... //重做上一次commit,并包括指定文件的新变化
	E: 分支
		a: $ git branch						//列出所有本地分支
		b: $ git branch -r					//列出所有远程分支			
		c: $ git branch -a					//列出所有本地分支和远程分支			
		d: $ git branch [branch-name]		//新建一个分支,但依然停留在当前分支			
		e: $ git checkout -b [branch]		//新建一个分支,并切换到该分支			
		f: $ git branch [branch] [commit]	//新建一个分支,指向指定commit			
		g: $ git branch --track [branch] [remote-branch]	//新建一个分支,与指定的远程分支建立追踪关系			
		h: $ git checkout [branch-name]		//切换到指定分支,并更新工作区
		i: $ git checkout -					//切换到上一个分支
		j: $ git branch --set-upstream [branch] [remote-branch]	//建立追踪关系,在现有分支与指定的远程分支之间
		k: $ git merge [branch]				//合并指定分支到当前分支
		l: $ git cherry-pick [commit]		//选择一个commit,合并进当前分支			
		m: $ git branch -d [branch-name]	//删除分支
		n: $ git push origin --delete [branch-name]		//删除远程分支
		o: $ git branch -dr [remote/branch]
	F: 标签
		a: $ git tag						//列出所有tag		
		b: $ git tag [tag]					//新建一个tag在当前commit
		c: $ git tag [tag] [commit]			//新建一个tag在指定commit
		d: $ git tag -d [tag]				//删除本地tag
		e: $ git push origin :refs/tags/[tagName]	//删除远程tag
		f: $ git show [tag]					//查看tag信息
		g: $ git push [remote] [tag]		//提交指定tag
		h: $ git push [remote] --tags		//提交所有tag
		i: $ git checkout -b [branch] [tag]	//新建一个分支,指向某个tag
	G: 查看信息	
		a: $ git status						//显示有变更的文件
		b: $ git log						//显示当前分支的版本历史
		c: $ git log --stat					//显示commit历史,以及每次commit发生变更的文件
		d: $ git log -S [keyword]			//搜索提交历史,根据关键词
		e: $ git log [tag] HEAD --pretty=format:%s	//显示某个commit之后的所有变动,每个commit占据一行
		f: $ git log [tag] HEAD --grep feature	//显示某个commit之后的所有变动,其"提交说明"必须符合搜索条件
		g: $ git log --follow [file]		//显示某个文件的版本历史,包括文件改名
		h: $ git log -p [file]				//显示指定文件相关的每一次diff
		i: $ git log -5 --pretty --oneline	//显示过去5次提交
		j: $ git shortlog -sn				//显示所有提交过的用户,按提交次数排序
		k: $ git blame [file]				//显示指定文件是什么人在什么时间修改过
		l: $ git diff						//显示暂存区和工作区的代码差异
		m: $ git diff --cached [file]		//显示暂存区和上一个commit的差异
		n: $ git diff HEAD					//显示工作区与当前分支最新commit之间的差异
		o: $ git diff [first-branch]...[second-branch]	//显示两次提交之间的差异
		p: $ git diff --shortstat "@{0 day ago}"		//显示今天你写了多少行代码
		q: $ git show [commit]				//显示某次提交的元数据和内容变化
		r: $ git show --name-only [commit]	//显示某次提交发生变化的文件
		s: $ git show [commit]:[filename]	//显示某次提交时,某个文件的内容
		t: $ git reflog						//显示当前分支的最近几次提交		
		u: $ git rebase [branch]			//从本地master拉取代码更新当前分支: branch 一般为master
	H: 远程同步		
		a: $ git fetch [remote]				//下载远程仓库的所有变动
		b: $ git remote -v					//显示所有远程仓库
		c: $ git remote show [remote]		//显示某个远程仓库的信息
		d: $ git remote add [shortname] [url]	//增加一个新的远程仓库,并命名
		e: $ git pull [remote] [branch]		//取回远程仓库的变化,并与本地分支合并
		f: $ git push [remote] [branch]		//上传本地指定分支到远程仓库
		g: $ git push [remote] --force		//强行推送当前分支到远程仓库,即使有冲突
		h: $ git push [remote] --all		//推送所有分支到远程仓库
	I: 撤销
		a: $ git checkout [file]			//恢复暂存区的指定文件到工作区
		b: $ git checkout [commit] [file]	//恢复某个commit的指定文件到暂存区和工作区
		c: $ git checkout .					//恢复暂存区的所有文件到工作区
		d: $ git reset [file]				//重置暂存区的指定文件,与上一次commit保持一致,但工作区不变
		e: $ git reset --hard				//重置暂存区与工作区,与上一次commit保持一致
		f: $ git reset [commit]					//重置当前分支的指针为指定commit,同时重置暂存区,但工作区不变
		g: $ git reset --hard [commit]		//重置当前分支的HEAD为指定commit,同时重置暂存区和工作区,与指定commit一致
		h: $ git reset --keep [commit]		//重置当前HEAD为指定commit,但保持暂存区和工作区不变
		i: $ git revert [commit]			//新建一个commit,用来撤销指定commit.后者的所有变化都将被前者抵消,并且应用到当前分支
		j: $ git stash pop	
	J: 其他
		a: $ git archive 					//生成一个可供发布的压缩包
	
	
	
	
	
	
	
	
	
	