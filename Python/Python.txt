Python中的变量不需要声明,变量的赋值操作即是变量声明、定义的过程
Python 文件以 .py 为扩展名

//del var1[,var2[....,varN]]:		删除单个或多个对象
//字符串列表元祖 取值顺序: 从左往右: [0,len-1);  从右往左: [-1,-len];
//函数参数 *args 会接受任意个参数并解析为 args 元组, **args 会接受任意个键值对参数并解析为 args 字典
/* range(m=0,n,step=1): 创建一个 [m,m+step,m+step*2,...,n] 的列表
		1: range(n) 	=> [0,1,2,...,n]
		2: range(m,n)	=> [m,m+1,m+2,...,n]
		3: range(m,n,s)	=> [m,m+s,m+s*2,...,n]  */
		
/* 	[] 	1: 字符串		str[i]: 字符串第i个字符; 
						str[起始编号:终止编号(不含)]; str[起始编号:终止编号(不含):步长]
						str[a:b]: 取[a,b)的字符串; str[a:]: 取[a,len)的字符串; str[:b]: 取[0,b)的字符串; str[:]: 取字符串; 
						str[a:b:n]: [a,b)中每隔n个取; str[a::n]: [a,len)中每隔n个取; str[::n]: 每隔n个取; 
		2: 列表元组		list[i]: 列表的第i个元素; list[a:b] list[a:] list[:b] list[:] list[::n] list[a::n] list[a:b:n]
	+	1: 字符串		s1+s2		2: 列表元组  list1+list2
	*   1: 字符串		str*2 => str+str
		2: 列表元组		tuple*2 => tuple+tuple		*/

/*	1: 列表生成式: [<exp> for <var> in <list>]: list 中的每一个元素 通过 exp 表达式后 存入另一个列表 循环结束后返回新列表	
							eg: [x*x for x in range(1,4)] => [1,4,9] 
	2: 复杂表达式: ["%s%s" % (name,score) for name,score in dict.items() [if(..)]]: 可以迭代字典
	3: 条件过滤:   [<exp> for <var> in <list> if(<exp2>)]: 不满足条件的元素不允通过
	4: 多层表达式: [<exp> for <var1> in <list1> for <var2> in <list2> [..]]: 多重for循环嵌套   */

//Python 单行注释: #
//Python 多行注释: '''  <code>  '''		或者	"""  <code>  """
//Python 设置文件编码: # -*- coding: utf-8 -*

一: 变量和数据类型
	A: 变量赋值
		a: 单个变量赋值
			1: counter = 100
			2: miles = 1000.0
			3: name = "Sherlock"
		b: 多个变量赋值
			1: a=b=c=6
			2: a,b,c = 1,2,"Sherlock"
	B: 标准数据类型
		a: Numbers		数字	//数字数据类型用于存储值.数字类型是不可改变的数据类型,这意味着改变数字数据类型会分配一个新的对象
									eg: a=1; b=12L; c=1.2; d=1+2j; 
			1: int			有符号整型
			2: long			长整型,也可以代表八进制和十六进制(长整型使用 l L,建议 L)
			3: float		浮点型
			4: complex		复数(实部a和虚部b,可以用 a+bj,或者 complex(a,b) 表示, a,b为浮点型)
		b: String		字符串	//'' ""  由数字,字母,下划线组成
			1: []		/*  var[i]: 字符串第i个字符; str[a:b]: 取[a,b)的字符串; str[a:]: 取[a,len)的字符串; str[:b]: 取[0,b)的字符串; str[:]: 取字符串  */
							eg: str='Hello World!'; str[2]=>'l'; str[2:4]=>'ll'; str[2:]=>'llo World!'; str[:4]=>'Hell'
			2: + 			字符串连接运算符
			3: * 			重复操作 		eg: 'abc'*2 => abcabc
			4: in			成员运算符		eg: 'h' in 'hello' => True
			5: not in 		成员运算符		eg: 'h' not in 'hello' => False
			6: r/R			原始字符串		eg: r'\n' => \n //不进行转义
			7: len()		字符串长度		eg: len('ddd')=>3
			8: 字符串格式化					eg: "%-10s%d%c%.2f" % ('Sherlock',60,'c',1.2);  '%%s%d' % (1) % ('s') => '1s'
			9: ''' """		三引号, 三引号允许一个字符串跨多行, 字符串中可以包含换行符,制表符以及其他特殊字符
			0: Unicode字符串				eg: u'Hello World !'
			
		c: List			列表	//list[] 元素可以是: 字符,数字,字符串,列表(列表嵌套)	eg: list = ['coding',786,2.23,'Sherlock',['ssss',11]]
			1: []
			2: +
			3: *
			4: append()		添加列表项		eg: list=[]; list.append('Google'); list.append('coding'); => ['Google', 'coding']
			5: del 			删除列表项		eg: list=['physics','chemistry',1997,2000]; del list[2]; => ['physics','chemistry',2000]
			6: len()		获取长度		eg: len(['p','c',1,2])=>4
			7: in			成员运算符		eg: 1 in [1,2,3] => True
			8: for			迭代			eg: for x in [1,2,3]: print x
		d: Tuple		元组	//tuple() 类似列表,元组不能二次赋值,相当于只读列表 	eg: tuple = ('coding',786,2.23,'Sherlock',('ssss',11))
					//只有一个元素时加逗号: tup1 = (50,) 
			1: []
			2: +
			3: *
			4: del			可以直接删除元组	eg: tup=(1,'2'); del tup 
			5: len()		元祖长度
		e: Dictionary	字典	//dic{}  键: 数字,字符串或元组充当		eg: tinydict = {'name':'Sherlock','code':6734,('dept','qqq'):'sales',2:'dddd'} 
			1: [key]		获取对应 key 的 value	eg: tinydict['code']=>6734; tinydict[2]=>'dddd'
			2: keys()		获取所有 key			eg: tinydict.keys()=> ['name','code','dept',2]
			3: values()		获取所有 value			eg: tinydict.values()=> ['Sherlock',6734,'sales','dddd']
			4: del			删除字段元素			eg: del tinydict['name'];
		f: Set 			集合	//set{}  元素无序, 不可重复				eg: set = set([1,2,3]) => set = {1,2,3}
			1: |			并集
			2: &			交集
			3: -			差集
			4: ^			对称差集(并集与交集的差集)(a|b - a&b)

二: 运算符
	A: 算术运算符
		a: + - * / %
		b: ** 				幂 x**y => x^y
		c: //				取整除,商的整数部分	 eg: 5/2=2  5//2=2  5.0/2=2.5  5.0//2=2.0   
	B: 比较运算符
		a: == != <> > < >= <=
	C: 赋值运算符
		a: = += -= *= /= %= **= //=
	D: 位运算符
		a: & | ^ ~ << >>
	E: 逻辑运算符
		a: and or not 
	F: 身份运算符
		a: is 		判断两个标识符是不是引用自一个对象	eg: x,y='x','y'; x is y
		b: is not	判断两个标识符是不是引用自不同对象	eg: x,y=1,2.0; x is not y
		
三: 语言结构
			//非0和非空(null)值为 True, 0 或 null 为 False
	A: 选择结构
		a: 	if()：
				<code>
			elif(): 
				<code>
			else：
				<code>
				
			//赋值类似三目: <var> = <exp1> if(<xx>) else <exp2>;
		b:  if(): <code>
			elif(): <code>
			else: <code>
	B: 循环结构
		a:  while():
				<code>
				[continue][break]
				<code>
			else: 
				<code>
		b:  for <i> in <var>: 		//for 循环可以遍历字符串的每个字符: for s in 'sss': print s
				<code>
				[continue][break]
				<code>
			else: 
				<code>
				
					eg: 遍历字典: for k,v in dict.items():;		遍历列表元组: for i in list:;
						遍历字典key: for k in dict.keys():;		遍历字典value: for v in dict.values();
四: 日期/时间
	A: 日期时间 time
		a: 时间元组: struct_time 元组
			//(tm_year,tm_mon,tm_mday,tm_hour,tm_min,tm_sec,tm_wday,tm_yday,tm_isdst) => (年,月,日,时,分,秒,一周的第几日(0~6 天~六),一年的第几日(1~366),夏令时)
		b: 获取时间
			1: time.time()  		//获取当前时间戳,浮点数
			2: time.localtime()		//将浮点时间戳转化为时间元组 	eg: time.localtime(time.time()-60*60*1)
			3: time.asctime()		//格式化时间		eg: time.asctime(time.localtime(time.time())) => 'Mon Dec 16 02:40:51 2019'
			4: time.strftime()		//格式化日期		eg: time.strftime("%Y-%m-%d %H:%M:%S", time.localtime()) => '2019-12-16 02:45:26'
				//%y: 两位数年; %Y: 四位数年; %m: 月; %d: 月中天; %H: 24小时时; %l: 12小时时; %M: 分; %S: 秒; %j: 年中日;  
	B: 日历 calendar
		a: 获取某月日历
			1: calendar.month(2018, 7)	//获取

五: 函数 模块
	A: 函数
		a: 格式
			def <function_name>(<parameters>):
				"函数_文档字符串"
				<code>
				return [<expression>];
		b: 值传递 引用传递
			1: Numbers,String,Tuples 为不可更改对象,函数传值时,为值传递
			2: List,Dictionary 为可以修改的对象,函数传值时,为引用传递
		c: 函数参数
			1: 关键字参数	调用函数时,参数的顺序与声明时不一致,可以用参数名匹配参数值
								eg: def printinfo(name,age):return  		printinfo(age=18,name="Sherlock")
			2: 缺省参数		调用参数时,缺省参数的值如果没有传入,则被认为是默认值 
								eg: def a(arg1='没传arg1'):print arg1;  a(); => 没传arg1
			3: 不定长参数	加了*号的变量名会存放所有没有命名的变量参数,*变量为元组//加*号变量必须放最后面,只能有一个变量加*
					def <funname>([formal_args,]*var_args_tuple): 
								eg: def printinfo(arg1,*vartuple):   
									printinfo(10); 			=>  arg1=10,vartuple=()
									printinfo(70,60,50);	=>	arg1=70,vartuple=(60,50)
		d: 匿名函数
				lambda <parameters>: <expression>
			1: lambda 的主体是一个表达式,而不是一个代码块
			2: 该语句会返回 <expression>
				eg: f = lambda x : x+2		=> f(x) = x + 2
	
	B: 高阶函数
			函数其实也是一个变量, 函数名可作为参数传入, 函数返回值可以是函数
			eg: def add(x, y, f):
					return f(x) + f(y);
				print add(-25,9,abs); =>  25+9=34 
		a: Python 内置高阶函数
				f 函数,list 列表
			1: map(f,list)			列表的每一个元素都将调用一次函数 f 并将计算结果作为新列表的元素, 返回一个新的列表
										eg: def f(x): return x*x
											map(f, [1, 2, 3, 4, 5, 6, 7, 8, 9]) => [1,4,9,16,25,36,49,64,81]
			2: reduce(f,list[,s])	函数 f(arg1,arg2), list 的每一个元素都与上一次调用 f 的返回值作为这一次 f 的参数,返回最后一次 f 的返回值
									第一次: f(list[0],list[1]), 若设置了初始值 s 则第一次: f(s,list[0])
										eg: def prod(x, y): return x * y
											reduce(prod,[2,4,5,7,12],2)	=>  2*2*4*5*7*12
			3: filter(f,list)		过滤器,函数 f 对 list 元素进行判断返回 True/False, filter()通过过滤将原列表组合一个新的列表
										eg: def f(x): return x%2==0
											filter(f,range(1,11))	=>  [2,4,6,8,10]
			4: sorted(list[,f])		排序,根据排序规则对列表排序
				sorted(list)		按照自然顺序排序		eg: sorted([36, 5, 12, 9, 21]) =>  [5, 9, 12, 21, 36]
				sorted(list,f)		自定义排序规则,函数 f(arg1,arg2),arg1->arg2 则返回 -1,arg2->arg1 后则返回 1,arg1<->arg2 则返回 0.
											eg: def f(s1, s2): return cmp(s1.lower(),s2.lower()); //忽略大小写比较字符串
												sorted(['bob','about','Zoo','Credit'],f);	=>  ['about','bob','Credit','Zoo']
		b: 函数返回值可以是函数
			eg: def calc_prod(lst):
					def ff(): return sum(lst)
					return ff  //返回求和函数ff
				f = calc_prod([1, 2, 3, 4]) //f 为求和函数 ff
				print f()	//调用求和函数 ff, 结果为 1+2+3+4
		c: 闭包: 内层函数引用了外层函数的变量(参数也算变量),然后返回内层函数的情况,称为闭包(Closure)
					eg: def calc_sum(lst):
							def lazy_sum():		
								return sum(lst) //内层函数 lazy_sum() 引用了外层变量 lst
							return lazy_sum		//返回内层函数, 即返回了一个闭包 lazy_sum
			1: 返回闭包不能引用循环变量 
				fs = [];		
				for i in list:
					def f():
						return i*i //返回闭包使用循环变量
					fs.append(f);	//fs 最后的每一个元素调用时都是 f(list[len-1])
				return fs
				//通过函数 f(j), 绕过循环变量
				def f(j): 
					def g():
						return j*j //j 与循环变量 i 无关
					return g
				fs.append(f(i)); //f(i) 返回函数 g
		d: 装饰器 decorator
				高阶函数 def <name>(f): 
				在其他函数 f 调用 @<name> 时, 将变成 
					@new_fn		=>	def f(x):;
					def f(x):;	=>	f = new_fn(f); //原 f()被彻底隐藏
			1: 无参装饰器 decorator(f)
				def new_f(f): 
					@functools.wraps(f)		//import functools 可以将函数 f 的各种参数赋值给 wrapper
					def wrapper(*args,**kw):
						<code>
						return f(*args,**kw);
					return wrapper
				
				eg: def log(f):	//打印日志
						@functools.wraps(f)
						def fn(*args,**kw):
							print 'call ' + f.__name__+ '()';
							return f(*args,**kw);
						return fn
					@log
					def f(x): return x*x
			2: 带参装饰器 decorator(<args>)
				def new_f(<args>):
					def new_f_decorator(f):
						@functools.wraps(f)		//import functools 可以将函数 f 的各种参数赋值给 wrapper
						def wrapper(*args, **kw):
							<code>
							return f(*args, **kw);
						return wrapper
					return new_f_decorator
				@new_f('ss')
				def f(x): 
		e: 偏函数 functools.partial(f,默认值=<value>)
				functools.partial 帮助我们创建一个偏函数
			eg: int2 = functools.partial(int, base=2)	//int2(n)=int(n,2) 
				sorted_ignore_case = functools.partial(sorted,cmp= lambda s1,s2:cmp(s1.lower(),s2.lower()))	//忽略大小写排序
							
	C: 模块 Module
			模块是一个 Python 文件, 以 .py 结尾,包含了 Python 对象定义的 Python 语句
		a: 引入模块
			1: import <module1>,..				//引入[多个]模块,通过 module.function 访问指定模块的函数	eg: import math; print math.floor(1.2)
			2: from <module> import <name1>,.. 	//引入模块的[多个]指定部分			eg: from math import floor; print floor(1.2)
			3: from <model> import * 			//引入模块的全部内容,不建议使用
			4: import <module1> as <alias>		//引入模块时可以赋予别名
		b: 定位模块,查找顺序
			1: 当前目录
			2: 如果不在当前目录, Python 则搜索在 shell 变量 PYTHONPATH 下的每个目录
			3: 如果都找不到, Python 会查看默认路径. Unix下, 默认路径一般为/usr/local/lib/python
		c: PYTHONPATH 变量
			1: set PYTHONPATH=c:\python27\lib			//Windows
			2: set PYTHONPATH=/usr/local/lib/python		//Unix
		d: 命名空间个作用域
			1: global <var>		在局部使用全局变量(可修改全局变量值)
					eg: Money=2000
						def AddMoney(): global Money; Money += 1; return
		e: dir(<module>) 		返回一个列表, 列表包含所有模块,变量,函数
		f: 包
			1:  Phone/a.py:  def A():
				Phone/b.py:  def B():
				Phone/c.py:  def C():
				Phone/__init__.py: from a import A; from b import B; from c import C
				在 import Phone 后就可以使用函数 A(),B(),C()
		g: __future__
				Python的新版本会引入新的功能, 但是, 实际上这些功能在上一个老版本中就已经存在了. 要"试用"某一新的特性, 就可以通过导入 __future__ 模块的某些功能来实现
			1: 要在 Python 2.7 中引入 3.x 的除法规则, 导入 __future__ 的 division：
				from __future__ import division
				print 10 / 3
			2: __future__ 的 unicode_literals: 在 Python 3.x 中, 字符串统一为unicode, 不需要加前缀 u, 而以字节存储的 str 则必须加前缀 b
			
			
六: 文件 I/O
	A: Output
		a: 打印到屏幕 
			1: print(<var>, ... , end='\n')		默认以换行结尾, 不想换行可设置 end=''
	B: Input
		a: 读取键盘输入
			1: raw_input([prompt])		从标准输入读取一行,并返回字符串(去掉结尾的换行符),prompt 为提示文本
			2: input([prompt]) 			与 raw_input() 基本相似, 但是 input()可以接收一个 Python 表达式作为输入,并将运算结果返回				
				[x*5 for x in range(2,10,2)] => [10, 20, 30, 40]				//input
				[x*5 for x in range(2,10,2)] => [x*5 for x in range(2,10,2)] 	//raw_input
	C: 文件
		a: 打开文件
				file = open(<file_name> [, <access_mode>][, <buffering>]) 
			1: access_mode: 打开文件模式, 默认只读(r) 
				r(读) w(写) a(追加) +(读写) b(二进制) 
							r   r+  w   w+  a   a+	 //rb rb+ wb wb+ ab ab+
				读			+	+		+		+
				写				+	+	+	+	+
				创建				+	+	+	+
				覆盖				+	+		
				指针在开始	+	+	+	+		
				指针在结尾					+	+
				
			2: buffering: 如果值取0, 就不会有寄存. 如果取1, 访问文件时会寄存行. 如果取大于1的整数, 表明了这就是的寄存区的缓冲大小. 如果取负值, 寄存区的缓冲大小则为系统默认
		b: File 对象属性
			1: file.closed 		返回文件是否已关闭
			2: file.mode		返回打开文件的访问模式
			3: file.name		返回文件名称
			4: file.softspace	
		c: 关闭文件 file.close()
		d: 写入文件 
			1: file.write(str) 	//write 不会在字符串的结尾添加换行符 '\n'
			2: file.flush()		刷新文件内部缓冲
		e: 读取文件 
			1: file.read()			尽可能多地读取更多内容, 很可能是直到文件的末尾
			2: file.read(n)			读取 n 字节的数据
			3: file.next()			读取下一行数据
			4: file.readline()		读取一行数据(包括换行符'\n')
			5: file.readline(n)		读取一行数据, 不超过 n 个字节 (包括换行符'\n')
			6: file.readlines()		读取所有行(直到结束符 EOF)并返回列表
				eg: fo = open("runoob.txt", "r")
					for line in fo.readlines(): print(line,end='')
			
		f: 文件指针
			1: file.tell()					返回当前指针(int)
			2: file.seek(offset[,from])		指针移动 offset 字节(from=0: 从文件开头开始移动; from=1: 从指针当前位置开始移动; from=2: 从文件末尾开始移动;)
		g: 重命名文件 os.rename(current_file_name, new_file_name)	//os 模块
		h: 删除文件 os.remove(file_name)	//os 模块
		i: 目录 	//os 模块
			1: os.mkdir(dir) 	创建目录(们)
			2: os.chdir(dir)	修改当前目录名为 dir
			3: os.getcwd()		返回当前工作目录
			4: os.rmdir(dir)	删除目录(只能删除空目录)
			
七: 异常处理
	A: 标准异常
		a: BaseException			所有异常的基类
		b: SystemExit				解释器请求退出
		c: KeyboardInterrupt		用户中断执行(通常是输入^C)
		d: Exception				常规错误的基类
		e: StopIteration			迭代器没有更多的值
		f: GeneratorExit			生成器(generator)发生异常来通知退出
		g: StandardError			所有的内建标准异常的基类
		h: ArithmeticError			所有数值计算错误的基类
		i: FloatingPointError		浮点计算错误
		j: OverflowError			数值运算超出最大限制
		k: ZeroDivisionError		除(或取模)零 (所有数据类型)
		l: AssertionError			断言语句失败
		m: AttributeError			对象没有这个属性
		n: EOFError					没有内建输入,到达EOF 标记
		o: EnvironmentError			操作系统错误的基类
		p: IOError					输入/输出操作失败
		q: OSError					操作系统错误
		r: WindowsError				系统调用失败
		s: ImportError				导入模块/对象失败
		t: LookupError				无效数据查询的基类
		u: IndexError				序列中没有此索引(index)
		v: KeyError					映射中没有这个键
		w: MemoryError				内存溢出错误(对于Python 解释器不是致命的)
		x: NameError				未声明/初始化对象 (没有属性)
		y: UnboundLocalError		访问未初始化的本地变量
		z: ReferenceError			弱引用(Weak reference)试图访问已经垃圾回收了的对象
		a: RuntimeError				一般的运行时错误
		b: NotImplementedError		尚未实现的方法
		c: SyntaxError				Python 语法错误
		d: IndentationError			缩进错误
		e: TabError					Tab 和空格混用
		f: SystemError				一般的解释器系统错误
		g: TypeError				对类型无效的操作
		h: ValueError				传入无效的参数
		i: UnicodeError				Unicode 相关的错误
		j: UnicodeDecodeError		Unicode 解码时的错误
		k: UnicodeEncodeError		Unicode 编码时错误
		l: UnicodeTranslateError	Unicode 转换时错误
		m: Warning					警告的基类
		n: DeprecationWarning		关于被弃用的特征的警告
		o: FutureWarning			关于构造将来语义会有改变的警告
		p: OverflowWarning			旧的关于自动提升为长整型(long)的警告
		q: PendingDeprecationWarning	关于特性将会被废弃的警告
		r: RuntimeWarning			可疑的运行时行为(runtime behavior)的警告
		s: SyntaxWarning			可疑的语法的警告
		t: UserWarning				用户代码生成的警告
	B: 异常处理
		a: try-except
				try:
					<code>        #运行别的代码
				except <exception_name>：
					<code>        #如果在try部份引发了'name'异常
				except <exception_name>, <data>:
					<code>        #如果引发了'name'异常, 获得附加的数据
				else:
					<code>        #如果没有异常发生
			1: except: 						不带异常类型, 则发生任何异常都会触发
			2: except(exception_name1,..): 	处理多个异常信息
		b: try-finally
				try:
					<code>
				finally:
					<code>    #退出try时总会执行
				raise
			1: 
	C: 用户自定义异常
			异常应该是典型的继承自 Exception 类, 通过直接或间接的方式
		# 创建自定义异常
		class Networkerror(RuntimeError):
			def __init__(self, arg):
				self.args = arg
		
		# 触发该异常
		try:
			raise Networkerror("Bad hostname")
		except Networkerror,e:
			print e.args
	
八: 面向对象
	a: 创建类 
		class ClassName: 
		#class ClassName(ParentClass1[,..]): 	# 创建派生类, 可以多继承
			'类的帮助信息'   #类文档字符串
			# 静态成员变量, 该变量为该类所有实例共用
			<name> [=<value>]
			/*Python 不允许实例化的类访问私有数据, 但可以使用 object._className__attrName (对象名._类名__私有属性名) 访问属性  
				eg: runoob = Runoob()  
					print runoob._Runoob__site
			*/
			__private_var = 0  	# private 成员变量 
			_protected_var = 0	# protected 成员变量 
			public_var = 0 		# public 成员变量
		
			//self 代表类实例, 定义方法时必须要有 self, 调用时不必传入相应的参数(self 不是关键字, 可以使用其他名字) 
			# 构造函数 # obj = className(args) 创建对象
			def __init__(self [, <args>]):
				<code>
			/* 自定义属性
				class Person: 
					def __init__(self, name, **kw):
						self.name = name
						for k,v in kw.iteritems():
							setattr(self, k, v)
				p = Person('张三', birth='1990-1-1', job='Student')  */
				
			# 析构函数 # del(obj) 删除对象
			def __del__(self ):
				<code>
			# 返回字符串 # str(obj)  返回对象的字符串形式
			def __str__(self):
				return <str>
			# 比较对象 # cmp(obj, x) 比较对象
			def __cmp__(self,x): 
				return <result>
			# 重载加法 # obj1 + obj2 对象加法
			def __add__(self,other):
				return <newobj>
			
			# 成员方法 	__method: private 方法; _method: protected 方法; method: public 方法
			def <method>(self [, <args>]):
				<code>
				[return [<expression>]]	
				
			# 静态成员方法
			@classmethod		//@classmethod 会将该成员方法绑定到 类, 而非类的实例, cls 相当于 self
			def <method>(cls [, <args>]):
				<code>
				[return [<expression>]]	
				
		eg: class Employee:
			   '所有员工的基类'
				empCount = 0

				def __init__(self, name, salary):
					self.name = name
					self.salary = salary		# 通过 self 访问, 修改实例对象的成员变量值
					Employee.empCount += 1	# 通过类名访问
				
				def displayCount(self):
					print "Total Employee %d" % Employee.empCount

				def displayEmployee(self):
					print "Name : ", self.name,  ", Salary: ", self.salary
			 
			# 创建 Employee 类的第一个对象
			emp1 = Employee("Zara", 2000)
			# 创建 Employee 类的第二个对象
			emp2 = Employee("Manni", 5000)
			emp1.displayEmployee()
			emp2.displayEmployee()
			print "Total Employee %d" % Employee.empCount
	
	b: 内置类属性
		1: __dict__ 	类的属性(包含一个字典, 由类的数据属性组成)
		2: __doc__ 		类的文档字符串
		3: __name__		类名
		4: __module__	类定义所在的模块 (类的全名是'__main__.className', 如果类位于一个导入模块mymod中, 那么className.__module__ 等于 mymod)
		5: __bases__ 	类的所有父类构成元素 (包含了一个由所有父类组成的元组)
	c: 类的继承
		1: class ClassName(ParentClass1[,..]) 可以多继承
			/* 继承的父类初始化
				class ClassName(ParentClass):
					def __init__(self, <Parent_args>, <args>): 
						super(ClassName, self).__init__(<Parent_args>) */
		2: issubclass(sub,sup)		判断 sub 是否是 sup 的子类或子孙类
		3: isinstance(obj, Class) 	判断 obj 是否是 Class 的实例对象或 Class 子类的实例对象
	d: 方法重写
			如果你的父类方法的功能不能满足你的需求, 你可以在子类重写你父类的方法
	e: 魔术方法
		1: __init__(self [,args...])	构造函数					obj = className(args)
		2: __del__(self)				析构函数					del(obj)
		3: __repr__(self)				转化为供解释器读取的形式	repr(obj)
		4: __str__(self)				将值转化为字符串的形式		str(obj)
		5: __cmp__(self, x)				对象比较					cmp(obj, x)
		6: __len__(self)				
		7: __slots__ = (<names>)		该类允许的属性列表, 不能添加不在该列表的属性
		8: __call__
		
	f: 运算符重载
		1: __add__(self,other)			加 +
		2: __sub__						减 -
		3: __mul__						乘 *
		4: __div__						除 /
		5: __mod__						余 %
		6: __pow__						幂 ^
		7: __lt__						<
		8: __le__						<=
		9: __eq__						==
		0: __ne__						!=
		1: __gt__						>
		2: __ge__						>=
		3: __and__						且 and
		4: __or__						或 or
		5: __xor__						异或 xor
		6: __neg__						非 neg
	g: @property
			使用 @property 可以达到 get/set 方法的效果的同时简洁使用
		@property	//该处 @property 注解方法为 get_score(), 使用时可直接通过 对象.score 访问
		def score(self):
			return self.__score
		
		@score.setter	//该处 @score.setter 为上个 @property 注解后的副产品 set_score, 使用时可以直接 对象.score = 值
		def score(self, score):
			if score < 0 or score > 100:
				raise ValueError('invalid score')
			self.__score = score
		
: 常用函数 
	1: isinstance(obj,classinfo): 判断对象 obj 是否是已知的 classinfo 类型. 
			classinfo 取值: int,float,bool,complex,str(字符串),list,dict(字典),set,tuple 
	

	A: 数据类型转换
		a: int(x [,base])			将 x 转换为一个整数
		b: long(x [,base] )			将 x 转换为一个长整数
		c: float(x)					将 x 转换到一个浮点数
		d: complex(real [,imag])	创建一个复数
		e: str(x)					将对象 x 转换为字符串
		f: repr(x)					将对象 x 转换为表达式字符串
		g: eval(str)				用来计算在字符串中的有效Python表达式,并返回一个对象
		h: tuple(s)					将序列 s 转换为一个元组
		i: list(s)					将序列 s 转换为一个列表
		j: set(s)					转换为可变集合
		k: dict(d)					创建一个字典. d 必须是一个序列 (key,value)元组.
		l: frozenset(s)				转换为不可变集合
		m: chr(x)					将一个整数转换为一个字符
		n: unichr(x)				将一个整数转换为 Unicode 字符
		o: ord(x)					将一个字符转换为它的整数值
		p: hex(x)					将一个整数转换为一个十六进制字符串
		q: oct(x)					将一个整数转换为一个八进制字符串
		
	B: 数学函数	
			数字常量: pi e
		a: 通常
			1: abs(x)				返回数字的绝对值	eg: abs(-10)=>10
			2: ceil(x)				返回数字的上入整数	eg: math.ceil(4.1)=>5
			3: cmp(x, y)			x<y => -1, x==y => 0, x>y => 1
			4: exp(x)				e的x次幂			eg: math.exp(1)=>2.718281828459045
			5: fabs(x)				数字的绝对值		eg: math.fabs(-10)=>10.0
			6: floor(x)				数字的下舍整数		eg: math.floor(4.9)=>4
			7: log(x)				如math.log(math.e)返回1.0,math.log(100,10)返回2.0
			8: log10(x)				返回以10为基数的x的对数,如math.log10(100)返回 2.0
			9: max(x1, x2,...)		返回给定参数的最大值,参数可以为序列.
			0: min(x1, x2,...)		返回给定参数的最小值,参数可以为序列.
			1: modf(x)				返回x的整数部分与小数部分,两部分的数值符号与x相同,整数部分以浮点型表示.
			2: pow(x, y)			x^y 运算后的值
			3: round(x [,n])		返回浮点数x的四舍五入值,如给出n值,则代表舍入到小数点后的位数.
			4: sqrt(x)				返回数字x的平方根,数字可以为负数,返回类型为实数,如math.sqrt(4)返回 2+0j
			5: range(n)				创建一个 [0,1,2,...,n] 的列表
		b: 随机数
			1: choice(seq)			从序列的元素中随机挑选一个元素		eg: random.choice(range(10))=>从0到9中随机挑选一个整数
			2: randrange([start,]stop[,step])	从指定范围内,按指定基数递增的集合中获取一个随机数,基数缺省值为1
			3: random()				随机生成下一个实数,它在[0,1)范围内
			4: seed([x])			改变随机数生成器的种子 seed.
			5: shuffle(lst)			将序列的所有元素随机排序
			6: uniform(x, y)		随机生成下一个实数,它在[x,y]范围内
		c: 三角函数
			1: acos(x)				返回x的反余弦弧度值
			2: asin(x)				返回x的反正弦弧度值
			3: atan(x)				返回x的反正切弧度值
			4: atan2(y, x)			返回给定的 X 及 Y 坐标值的反正切值
			5: cos(x)				返回x的弧度的余弦值
			6: hypot(x, y)			返回欧几里德范数 sqrt(x*x + y*y)
			7: sin(x)				返回的x弧度的正弦值
			8: tan(x)				返回x弧度的正切值
			9: degrees(x)			将弧度转换为角度	eg: degrees(math.pi/2)=>90.0
			10: radians(x)			将角度转换为弧度
	
	C: 字符串方法
		a: 查找字符串
			1: str.count(s,beg=0,end=len)		返回 s 在 str[beg:end] 里面出现的次数
			2: str.find(s,beg=0,end=len)		检测 s 是否包含在 str[beg:end] 中, 返回 第一个字符的索引值/-1
			3: str.rfind(s,beg=0,end=len)		类似于 find()函数,不过是从右边开始查找.
			4: str.index(s,beg=0,end=len)		跟 find()方法一样,只不过如果 s 不在 str 中会报一个异常.
			5: str.rindex(s,beg=0,end=len)		类似于 index(),不过是从右边开始.
			6: max(str)							返回字符串 str 中最大的字母.
			7: min(str)							返回字符串 str 中最小的字母.
		b: 判断字符串
			1: str.isalnum()						判断 str 至少有一个字符并且所有字符都是字母或数字,返回 True/False
			2: str.isalpha()						判断 str 至少有一个字符并且所有字符都是字母,返回 True/False
			3: str.isdecimal()						判断 str 只包含十进制数字,返回 True/False
			4: str.isdigit()						判断 str 只包含数字,返回 True/False 
			5: str.islower()						判断 str 中所有这些(区分大小写的)字符都是小写,返回 True/False
			6: str.isnumeric()						判断 str 中只包含数字字符,返回 True/False 
			7: str.isspace()						判断 str 中只包含空格,返回 True/False 
			8: str.istitle()						判断 str 是标题化的(单词:大写开头其余小写),返回 True/False 
			9: str.isupper()						判断 str 中所有这些(区分大小写的)字符都是大写,返回 True/False 
			0: str.endswith(obj,beg=0,end=len)		判断 str[beg:end] 是否以 obj 结束,返回 True/False.
			1: str.startswith(obj,beg=0,end=len)	判断 str[beg:end] 是否以 obj 开头,返回 True/False.
		c: 字符串替换
			1: str.format()								格式化字符串
			2: str.lower()								转换 str 中所有大写字符为小写.
			3: str.upper()								转换 str 中的小写字母为大写
			4: str.replace(s1,s2,num=str.count(s1))		把 str 中的 s1 替换成 s2, 替换不超过 num 次.
			5: str.capitalize()							把字符串的第一个字符大写
			6: str.swapcase()							翻转 str 中的大小写
			7: str.title()								"标题化" str,所有单词都是以大写开始,其余字母均为小写
			8: str.expandtabs(tabsize=8)				把字符串 str 中的 tab 符号转为空格, tab 符号默认的空格数是 8.
		d: 字符串分割 
			1: str.lstrip()							截掉 str 左边的空格
			2: str.rstrip()							删除 str 字符串末尾的空格.
			3: str.strip([obj])						去掉两端的空格(或者指定的 obg)
			4: str.split(s="",num=str.count(s))		以 s 为分隔符切片 str,仅分隔 num 个子字符串
			5: str.splitlines([keepends])			按照行('\r', '\r\n', \n')分隔,返回每一行为元素的列表,如果参数 keepends 为 False,不包含换行符,如果为 True,则保留换行符.
			6: str.partition(s)						从 s 出现的第一个位置起,把字符串str分成一个3元素的元组(str_pre_s,s,str_post_s),若 str 中不包含 s 则 str_pre_s == str.
			7: str.rpartition(s)					类似于 partition()函数,不过是从右边开始查找
		e: 字符串拼接
			1: str.center(width)		返回一个原字符串居中,并使用空格填充至长度 width 的新字符串
			2: str.ljust(width)			返回一个原字符串左对齐,并使用空格填充至长度 width 的新字符串
			3: string.rjust(width)		返回一个原字符串右对齐,并使用空格填充至长度 width 的新字符串
			4: str.zfill(width)			返回长度为 width 的字符串,原字符串 str 右对齐,前面填充0
			5: str.join(seq)			以 str 作为分隔符,将 seq 中所有的元素(的字符串表示)合并为一个新的字符串
		f: 其他
			1: str.maketrans(intab, outtab])	方法用于创建字符映射的转换表,第一个参数是字符串,表示需要转换的字符,第二个参数也是字符串表示转换的目标.
			2: str.translate(s, del="")			根据 s 给出的表(包含 256 个字符)转换 str 的字符,要过滤掉的字符放到 del 参数中
			3: str.decode(encoding='UTF-8')		以 encoding 指定的编码格式解码 str
			4: str.encode(encoding='UTF-8')		以 encoding 指定的编码格式编码 str
		
	D: 列表函数
		a: 列表函数
			1: cmp(list1, list2)	比较两个列表的元素
			2: len(list)			列表元素个数
			3: max(list)			返回列表元素最大值
			4: min(list)			返回列表元素最小值
			5: list(seq)			将元组转换为列表
				eg: list('ab') => ['a', 'b']
			6: zip(list1,list2)		将两个list转为一个列表,元素为元组: zip[i]=(list1[i],list2[i]) 
		b: 列表方法
			1: list.append(obj)			在列表末尾添加新的对象
			2: list.count(obj)			统计某个元素在列表中出现的次数
			3: list.extend(seq)			在列表末尾一次性追加另一个序列中的多个值(用新列表扩展原来的列表)
			4: list.index(obj)			从列表中找出某个值第一个匹配项的索引位置
			5: list.insert(index, obj)	将对象插入列表
			6: list.pop(obj=list[-1])	移除列表中的一个元素(默认最后一个元素),并且返回该元素的值
			7: list.remove(obj)			移除列表中某个值的第一个匹配项
			8: list.reverse()			反向列表中元素
			9: list.sort([func])		对原列表进行排序
	E: 元组函数
		1: cmp(tuple1, tuple2)	比较两个元组元素.
		2: len(tuple)			计算元组元素个数.
		3: max(tuple)			返回元组中元素最大值.
		4: min(tuple)			返回元组中元素最小值.
		5: tuple(seq)			将列表转换为元组.
			eg: tuple([1,2]) => (1,2)
	
	F: 字典函数
		a: 字典函数
			1: cmp(dict1, dict2)	比较两个字典元素.
			2: len(dict)			计算字典元素个数,即键的总数.
			3: str(dict)			输出字典可打印的字符串表示.
			4: type(variable)		返回输入的变量类型,如果变量是字典就返回字典类型.
		b: 字典方法
			0: dict([['a',1],['b',2]])		{'a':1, 'b':2}
			1: dict.clear()					删除字典内所有元素
			2: dict.copy()					返回一个字典的浅复制
			3: dict.fromkeys(seq[, val])	创建一个新字典,以序列 seq 中元素做字典的键,val 为字典所有键对应的初始值
			4: dict.get(key,default=None)	返回指定键的值,如果值不在字典中返回default值
			5: dict.has_key(key)			判断键是否在字典dict里, 返True/False
			6: dict.items()					以列表返回可遍历的(键, 值) 元组数组
			7: dict.keys()					以列表返回一个字典所有的键
			8: dict.setdefault(key,default=None)	和get()类似, 但如果键不存在于字典中,将会添加键并将值设为default
			9: dict.update(dict2)			把字典dict2的键/值对更新到dict里
			0: dict.values()				以列表返回字典中的所有值
			1: pop(key[,default])			删除字典给定键 key 所对应的值,返回值为被删除的值.key值必须给出. 否则,返回default值.
			2: popitem()					随机返回并删除字典中的一对键和值
	
	G: 集合函数
		a: 集合函数
			1: set(list/tuple)					将序列转为集合
		b: 集合方法
			1: set.add(item)					添加
			2: set.remove(item)					删除
			3: set.union(set2)					并集, 同 set|set2
			4: set.intersection(set2)			交集, 同 set&set2
			5: set.difference(set2)				差集, 同 set-set2
			6: set.symmetric_difference(set2) 	对称差集, 同 set^set2
	
	H: 时间函数
		a: Time 时间函数
			1: time.timezone									当地时区(未启动夏令时)距离格林威治的偏移秒数(>0,美洲;<=0大部分欧洲,亚洲,非洲).
			2: time.tzname										包含一对根据情况的不同而不同的字符串,分别是带夏令时的本地时区名称,和不带的.
			3: time.altzone										返回格林威治西部的夏令时地区的偏移秒数.对夏令时启用地区才能使用.
			4: time.time( )										获取当前时间的时间戳.
			5: time.localtime([secs])							将时间辍转为当地时间下的时间元组
			6: time.mktime(tupletime)							将时间元组转为时间辍
			7: time.strftime(fmt[,tupletime])					格式化时间日期
			8: time.strptime(str,fmt='%a %b %d %H:%M:%S %Y')	把一个时间字符串解析为时间元组
			9: time.asctime([tupletime])						将时间元组转为24字符的字符串 "Tue Dec 11 18:07:14 2008".
			0: time.clock()										用以浮点数计算的秒数返回当前的CPU时间.用来衡量不同程序的耗时,比time.time()更有用.
			1: time.ctime([secs])								作用相当于 asctime(localtime(secs)),未给参数相当于asctime()
			2: time.gmtime([secs])								将时间辍转为格林威治天文时间下的时间元组
			3: time.sleep(secs)									推迟调用线程的运行,secs指秒数.
			4: time.tzset()										根据环境变量TZ重新初始化时间相关设置.
		b: Calendar 日历函数
			1: calendar.calendar(y,w=2,l=1,c=6)			y 年年历,多行字符串,3个月一行,间隔距离为c. 每日宽度间隔为w字符.每行长度为(21*W+18+2*C).每星期行数 l.
			2: calendar.month(y,m,w=2,l=1)				y 年 m 月月历,多行字符串,每日宽度间隔为w字符.每行的长度为(7*w+6),每星期的行数 l.
			3: calendar.monthcalendar(y,m)				y 年 m 月月历,二维列表.每个子列表代表一个星期.
			4: calendar.prcal(y,w=2,l=1,c=6)			打印 y 年年历. print calendar.calendar(y,w,l,c).
			5: calendar.prmonth(y,m,w=2,l=1)			打印 y 年 m 月月历. print calendar.month(y,m,w,l).
			6: calendar.isleap(year)					判断是否是闰年,返回True/False.
			7: calendar.firstweekday( )					获取当前每周起始日期的设置.默认情况下,首次载入calendar模块时返回0,即星期一.
			8: calendar.setfirstweekday(weekday)		设置每周的起始日期码.0(星期一)到6(星期日).
			9: calendar.leapdays(y1,y2)					返回在Y1,Y2两年之间的闰年总数.
			0: calendar.monthrange(y,m)					返回两个整数.第一个是该月的星期几的日期码,第二个是该月的日期码.日从0(星期一)到6(星期日);月从1到12.
			1: calendar.timegm(tupletime)				和time.gmtime相反: 接受一个时间元组形式,返回该时刻的时间辍(1970纪元后经过的浮点秒数).
			2: calendar.weekday(year,month,day)			返回给定日期的日期码.0(星期一)到6(星期日).月份为 1(一月) 到 12(12月).
	